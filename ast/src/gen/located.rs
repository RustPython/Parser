// File automatically generated by ast/asdl_rs.py.

#[cfg(feature = "more-attributes")]
impl Located for crate::generic::Mod<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::ModModule<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::ModInteractive<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::ModExpression<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::ModFunctionType<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Stmt<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtFunctionDef<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAsyncFunctionDef<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtClassDef<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtReturn<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtDelete<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAssign<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAugAssign<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAnnAssign<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtFor<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAsyncFor<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtWhile<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtIf<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtWith<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAsyncWith<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtMatch<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtRaise<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtTry<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtTryStar<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtAssert<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtImport<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtImportFrom<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtGlobal<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtNonlocal<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtExpr<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtPass<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtBreak<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::StmtContinue<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Expr<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprBoolOp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprNamedExpr<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprBinOp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprUnaryOp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprLambda<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprIfExp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprDict<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprSet<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprListComp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprSetComp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprDictComp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprGeneratorExp<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprAwait<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprYield<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprYieldFrom<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprCompare<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprCall<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprFormattedValue<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprJoinedStr<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprConstant<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprAttribute<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprSubscript<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprStarred<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprName<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprList<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprTuple<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExprSlice<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::Comprehension<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Excepthandler<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::ExcepthandlerExceptHandler<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::Arguments<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Arg<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Keyword<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Alias<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::Withitem<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::MatchCase<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::Pattern<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchValue<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchSingleton<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchSequence<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchMapping<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchClass<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchStar<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchAs<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}

impl Located for crate::generic::PatternMatchOr<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::TypeIgnore<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Located for crate::generic::TypeIgnoreTypeIgnore<SourceRange> {
    fn range(&self) -> SourceRange {
        self.range
    }
}
