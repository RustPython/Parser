// File automatically generated by ast/asdl_rs.py.

#[cfg(feature = "more-attributes")]
impl Ranged for Mod {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Mod = crate::generic::Mod<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ModModule {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ModModule = crate::generic::ModModule<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ModInteractive {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ModInteractive = crate::generic::ModInteractive<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ModExpression {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ModExpression = crate::generic::ModExpression<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ModFunctionType {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ModFunctionType = crate::generic::ModFunctionType<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Stmt {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Stmt = crate::generic::Stmt<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtFunctionDef {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtFunctionDef = crate::generic::StmtFunctionDef<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAsyncFunctionDef {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAsyncFunctionDef = crate::generic::StmtAsyncFunctionDef<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtClassDef {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtClassDef = crate::generic::StmtClassDef<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtReturn {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtReturn = crate::generic::StmtReturn<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtDelete {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtDelete = crate::generic::StmtDelete<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAssign {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAssign = crate::generic::StmtAssign<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAugAssign {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAugAssign = crate::generic::StmtAugAssign<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAnnAssign {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAnnAssign = crate::generic::StmtAnnAssign<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtFor {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtFor = crate::generic::StmtFor<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAsyncFor {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAsyncFor = crate::generic::StmtAsyncFor<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtWhile {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtWhile = crate::generic::StmtWhile<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtIf {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtIf = crate::generic::StmtIf<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtWith {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtWith = crate::generic::StmtWith<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAsyncWith {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAsyncWith = crate::generic::StmtAsyncWith<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtMatch {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtMatch = crate::generic::StmtMatch<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtRaise {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtRaise = crate::generic::StmtRaise<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtTry {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtTry = crate::generic::StmtTry<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtTryStar {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtTryStar = crate::generic::StmtTryStar<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtAssert {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtAssert = crate::generic::StmtAssert<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtImport {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtImport = crate::generic::StmtImport<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtImportFrom {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtImportFrom = crate::generic::StmtImportFrom<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtGlobal {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtGlobal = crate::generic::StmtGlobal<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtNonlocal {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtNonlocal = crate::generic::StmtNonlocal<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtExpr {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtExpr = crate::generic::StmtExpr<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtPass {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtPass = crate::generic::StmtPass<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtBreak {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtBreak = crate::generic::StmtBreak<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for StmtContinue {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type StmtContinue = crate::generic::StmtContinue<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Expr {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Expr = crate::generic::Expr<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprBoolOp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprBoolOp = crate::generic::ExprBoolOp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprNamedExpr {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprNamedExpr = crate::generic::ExprNamedExpr<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprBinOp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprBinOp = crate::generic::ExprBinOp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprUnaryOp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprUnaryOp = crate::generic::ExprUnaryOp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprLambda {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprLambda = crate::generic::ExprLambda<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprIfExp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprIfExp = crate::generic::ExprIfExp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprDict {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprDict = crate::generic::ExprDict<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprSet {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprSet = crate::generic::ExprSet<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprListComp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprListComp = crate::generic::ExprListComp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprSetComp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprSetComp = crate::generic::ExprSetComp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprDictComp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprDictComp = crate::generic::ExprDictComp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprGeneratorExp {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprGeneratorExp = crate::generic::ExprGeneratorExp<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprAwait {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprAwait = crate::generic::ExprAwait<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprYield {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprYield = crate::generic::ExprYield<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprYieldFrom {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprYieldFrom = crate::generic::ExprYieldFrom<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprCompare {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprCompare = crate::generic::ExprCompare<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprCall {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprCall = crate::generic::ExprCall<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprFormattedValue {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprFormattedValue = crate::generic::ExprFormattedValue<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprJoinedStr {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprJoinedStr = crate::generic::ExprJoinedStr<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprConstant {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprConstant = crate::generic::ExprConstant<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprAttribute {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprAttribute = crate::generic::ExprAttribute<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprSubscript {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprSubscript = crate::generic::ExprSubscript<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprStarred {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprStarred = crate::generic::ExprStarred<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprName {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprName = crate::generic::ExprName<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprList {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprList = crate::generic::ExprList<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprTuple {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprTuple = crate::generic::ExprTuple<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExprSlice {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExprSlice = crate::generic::ExprSlice<TextRange>;
pub type ExprContext = crate::generic::ExprContext;
pub type Boolop = crate::generic::Boolop;
pub type Operator = crate::generic::Operator;
pub type Unaryop = crate::generic::Unaryop;
pub type Cmpop = crate::generic::Cmpop;
#[cfg(feature = "more-attributes")]
impl Ranged for Comprehension {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Comprehension = crate::generic::Comprehension<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Excepthandler {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Excepthandler = crate::generic::Excepthandler<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for ExcepthandlerExceptHandler {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type ExcepthandlerExceptHandler = crate::generic::ExcepthandlerExceptHandler<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Arguments {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Arguments = crate::generic::Arguments<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Arg {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Arg = crate::generic::Arg<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Keyword {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Keyword = crate::generic::Keyword<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Alias {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Alias = crate::generic::Alias<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Withitem {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Withitem = crate::generic::Withitem<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for MatchCase {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type MatchCase = crate::generic::MatchCase<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for Pattern {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type Pattern = crate::generic::Pattern<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchValue {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchValue = crate::generic::PatternMatchValue<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchSingleton {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchSingleton = crate::generic::PatternMatchSingleton<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchSequence {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchSequence = crate::generic::PatternMatchSequence<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchMapping {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchMapping = crate::generic::PatternMatchMapping<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchClass {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchClass = crate::generic::PatternMatchClass<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchStar {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchStar = crate::generic::PatternMatchStar<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchAs {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchAs = crate::generic::PatternMatchAs<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for PatternMatchOr {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type PatternMatchOr = crate::generic::PatternMatchOr<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for TypeIgnore {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type TypeIgnore = crate::generic::TypeIgnore<TextRange>;
#[cfg(feature = "more-attributes")]
impl Ranged for TypeIgnoreTypeIgnore {
    fn range(&self) -> TextRange {
        self.custom
    }
}
pub type TypeIgnoreTypeIgnore = crate::generic::TypeIgnoreTypeIgnore<TextRange>;
