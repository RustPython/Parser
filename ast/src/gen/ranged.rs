// File automatically generated by ast/asdl_rs.py.

use crate::Ranged;
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::ModModule<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::ModInteractive<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::ModExpression<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::ModFunctionType<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtFunctionDef<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAsyncFunctionDef<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtClassDef<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtReturn<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtDelete<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAssign<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAugAssign<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAnnAssign<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtFor<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAsyncFor<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtWhile<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtIf<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtWith<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAsyncWith<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtMatch<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtRaise<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtTry<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtTryStar<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtAssert<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtImport<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtImportFrom<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtGlobal<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtNonlocal<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtExpr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtPass<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtBreak<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::StmtContinue<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprBoolOp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprNamedExpr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprBinOp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprUnaryOp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprLambda<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprIfExp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprDict<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprSet<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprListComp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprSetComp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprDictComp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprGeneratorExp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprAwait<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprYield<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprYieldFrom<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprCompare<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprCall<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprFormattedValue<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprJoinedStr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprConstant<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprAttribute<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprSubscript<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprStarred<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprName<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprList<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprTuple<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExprSlice<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::Comprehension<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::ExcepthandlerExceptHandler<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::Arguments<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::Arg<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::Keyword<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::Alias<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::Withitem<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::MatchCase<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchValue<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchSingleton<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchSequence<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchMapping<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchClass<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchStar<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchAs<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::generic::PatternMatchOr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "more-attributes")]
impl Ranged for crate::generic::TypeIgnoreTypeIgnore<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
