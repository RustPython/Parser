// File automatically generated by ast/asdl_rs.py.

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Mod<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Stmt<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Expr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::ExprContext<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Boolop<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Operator<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Unaryop<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Cmpop<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Comprehension<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Excepthandler<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Arguments<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Arg<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Keyword<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Alias<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::Withitem<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::MatchCase<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

impl Ranged for crate::generic::Pattern<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}

#[cfg(feature = "more-attributes")]

impl Ranged for crate::generic::TypeIgnore<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
