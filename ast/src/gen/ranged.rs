// File automatically generated by ast/asdl_rs.py.

pub type Mod = crate::generic::Mod<TextRange>;

pub type ModModule = crate::generic::ModModule<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::ModModule<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ModInteractive = crate::generic::ModInteractive<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::ModInteractive<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ModExpression = crate::generic::ModExpression<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::ModExpression<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ModFunctionType = crate::generic::ModFunctionType<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::ModFunctionType<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::Mod {
    fn range(&self) -> TextRange {
        match self {
            Self::Module(node) => node.range(),
            Self::Interactive(node) => node.range(),
            Self::Expression(node) => node.range(),
            Self::FunctionType(node) => node.range(),
        }
    }
}

pub type Stmt = crate::generic::Stmt<TextRange>;

pub type StmtFunctionDef = crate::generic::StmtFunctionDef<TextRange>;

impl Ranged for crate::generic::StmtFunctionDef<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAsyncFunctionDef = crate::generic::StmtAsyncFunctionDef<TextRange>;

impl Ranged for crate::generic::StmtAsyncFunctionDef<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtClassDef = crate::generic::StmtClassDef<TextRange>;

impl Ranged for crate::generic::StmtClassDef<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtReturn = crate::generic::StmtReturn<TextRange>;

impl Ranged for crate::generic::StmtReturn<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtDelete = crate::generic::StmtDelete<TextRange>;

impl Ranged for crate::generic::StmtDelete<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAssign = crate::generic::StmtAssign<TextRange>;

impl Ranged for crate::generic::StmtAssign<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAugAssign = crate::generic::StmtAugAssign<TextRange>;

impl Ranged for crate::generic::StmtAugAssign<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAnnAssign = crate::generic::StmtAnnAssign<TextRange>;

impl Ranged for crate::generic::StmtAnnAssign<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtFor = crate::generic::StmtFor<TextRange>;

impl Ranged for crate::generic::StmtFor<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAsyncFor = crate::generic::StmtAsyncFor<TextRange>;

impl Ranged for crate::generic::StmtAsyncFor<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtWhile = crate::generic::StmtWhile<TextRange>;

impl Ranged for crate::generic::StmtWhile<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtIf = crate::generic::StmtIf<TextRange>;

impl Ranged for crate::generic::StmtIf<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtWith = crate::generic::StmtWith<TextRange>;

impl Ranged for crate::generic::StmtWith<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAsyncWith = crate::generic::StmtAsyncWith<TextRange>;

impl Ranged for crate::generic::StmtAsyncWith<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtMatch = crate::generic::StmtMatch<TextRange>;

impl Ranged for crate::generic::StmtMatch<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtRaise = crate::generic::StmtRaise<TextRange>;

impl Ranged for crate::generic::StmtRaise<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtTry = crate::generic::StmtTry<TextRange>;

impl Ranged for crate::generic::StmtTry<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtTryStar = crate::generic::StmtTryStar<TextRange>;

impl Ranged for crate::generic::StmtTryStar<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtAssert = crate::generic::StmtAssert<TextRange>;

impl Ranged for crate::generic::StmtAssert<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtImport = crate::generic::StmtImport<TextRange>;

impl Ranged for crate::generic::StmtImport<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtImportFrom = crate::generic::StmtImportFrom<TextRange>;

impl Ranged for crate::generic::StmtImportFrom<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtGlobal = crate::generic::StmtGlobal<TextRange>;

impl Ranged for crate::generic::StmtGlobal<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtNonlocal = crate::generic::StmtNonlocal<TextRange>;

impl Ranged for crate::generic::StmtNonlocal<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtExpr = crate::generic::StmtExpr<TextRange>;

impl Ranged for crate::generic::StmtExpr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtPass = crate::generic::StmtPass<TextRange>;

impl Ranged for crate::generic::StmtPass<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtBreak = crate::generic::StmtBreak<TextRange>;

impl Ranged for crate::generic::StmtBreak<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type StmtContinue = crate::generic::StmtContinue<TextRange>;

impl Ranged for crate::generic::StmtContinue<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::Stmt {
    fn range(&self) -> TextRange {
        match self {
            Self::FunctionDef(node) => node.range(),
            Self::AsyncFunctionDef(node) => node.range(),
            Self::ClassDef(node) => node.range(),
            Self::Return(node) => node.range(),
            Self::Delete(node) => node.range(),
            Self::Assign(node) => node.range(),
            Self::AugAssign(node) => node.range(),
            Self::AnnAssign(node) => node.range(),
            Self::For(node) => node.range(),
            Self::AsyncFor(node) => node.range(),
            Self::While(node) => node.range(),
            Self::If(node) => node.range(),
            Self::With(node) => node.range(),
            Self::AsyncWith(node) => node.range(),
            Self::Match(node) => node.range(),
            Self::Raise(node) => node.range(),
            Self::Try(node) => node.range(),
            Self::TryStar(node) => node.range(),
            Self::Assert(node) => node.range(),
            Self::Import(node) => node.range(),
            Self::ImportFrom(node) => node.range(),
            Self::Global(node) => node.range(),
            Self::Nonlocal(node) => node.range(),
            Self::Expr(node) => node.range(),
            Self::Pass(node) => node.range(),
            Self::Break(node) => node.range(),
            Self::Continue(node) => node.range(),
        }
    }
}

pub type Expr = crate::generic::Expr<TextRange>;

pub type ExprBoolOp = crate::generic::ExprBoolOp<TextRange>;

impl Ranged for crate::generic::ExprBoolOp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprNamedExpr = crate::generic::ExprNamedExpr<TextRange>;

impl Ranged for crate::generic::ExprNamedExpr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprBinOp = crate::generic::ExprBinOp<TextRange>;

impl Ranged for crate::generic::ExprBinOp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprUnaryOp = crate::generic::ExprUnaryOp<TextRange>;

impl Ranged for crate::generic::ExprUnaryOp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprLambda = crate::generic::ExprLambda<TextRange>;

impl Ranged for crate::generic::ExprLambda<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprIfExp = crate::generic::ExprIfExp<TextRange>;

impl Ranged for crate::generic::ExprIfExp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprDict = crate::generic::ExprDict<TextRange>;

impl Ranged for crate::generic::ExprDict<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprSet = crate::generic::ExprSet<TextRange>;

impl Ranged for crate::generic::ExprSet<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprListComp = crate::generic::ExprListComp<TextRange>;

impl Ranged for crate::generic::ExprListComp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprSetComp = crate::generic::ExprSetComp<TextRange>;

impl Ranged for crate::generic::ExprSetComp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprDictComp = crate::generic::ExprDictComp<TextRange>;

impl Ranged for crate::generic::ExprDictComp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprGeneratorExp = crate::generic::ExprGeneratorExp<TextRange>;

impl Ranged for crate::generic::ExprGeneratorExp<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprAwait = crate::generic::ExprAwait<TextRange>;

impl Ranged for crate::generic::ExprAwait<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprYield = crate::generic::ExprYield<TextRange>;

impl Ranged for crate::generic::ExprYield<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprYieldFrom = crate::generic::ExprYieldFrom<TextRange>;

impl Ranged for crate::generic::ExprYieldFrom<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprCompare = crate::generic::ExprCompare<TextRange>;

impl Ranged for crate::generic::ExprCompare<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprCall = crate::generic::ExprCall<TextRange>;

impl Ranged for crate::generic::ExprCall<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprFormattedValue = crate::generic::ExprFormattedValue<TextRange>;

impl Ranged for crate::generic::ExprFormattedValue<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprJoinedStr = crate::generic::ExprJoinedStr<TextRange>;

impl Ranged for crate::generic::ExprJoinedStr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprConstant = crate::generic::ExprConstant<TextRange>;

impl Ranged for crate::generic::ExprConstant<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprAttribute = crate::generic::ExprAttribute<TextRange>;

impl Ranged for crate::generic::ExprAttribute<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprSubscript = crate::generic::ExprSubscript<TextRange>;

impl Ranged for crate::generic::ExprSubscript<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprStarred = crate::generic::ExprStarred<TextRange>;

impl Ranged for crate::generic::ExprStarred<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprName = crate::generic::ExprName<TextRange>;

impl Ranged for crate::generic::ExprName<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprList = crate::generic::ExprList<TextRange>;

impl Ranged for crate::generic::ExprList<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprTuple = crate::generic::ExprTuple<TextRange>;

impl Ranged for crate::generic::ExprTuple<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type ExprSlice = crate::generic::ExprSlice<TextRange>;

impl Ranged for crate::generic::ExprSlice<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::Expr {
    fn range(&self) -> TextRange {
        match self {
            Self::BoolOp(node) => node.range(),
            Self::NamedExpr(node) => node.range(),
            Self::BinOp(node) => node.range(),
            Self::UnaryOp(node) => node.range(),
            Self::Lambda(node) => node.range(),
            Self::IfExp(node) => node.range(),
            Self::Dict(node) => node.range(),
            Self::Set(node) => node.range(),
            Self::ListComp(node) => node.range(),
            Self::SetComp(node) => node.range(),
            Self::DictComp(node) => node.range(),
            Self::GeneratorExp(node) => node.range(),
            Self::Await(node) => node.range(),
            Self::Yield(node) => node.range(),
            Self::YieldFrom(node) => node.range(),
            Self::Compare(node) => node.range(),
            Self::Call(node) => node.range(),
            Self::FormattedValue(node) => node.range(),
            Self::JoinedStr(node) => node.range(),
            Self::Constant(node) => node.range(),
            Self::Attribute(node) => node.range(),
            Self::Subscript(node) => node.range(),
            Self::Starred(node) => node.range(),
            Self::Name(node) => node.range(),
            Self::List(node) => node.range(),
            Self::Tuple(node) => node.range(),
            Self::Slice(node) => node.range(),
        }
    }
}

pub type ExprContext = crate::generic::ExprContext;

pub type Boolop = crate::generic::Boolop;

pub type Operator = crate::generic::Operator;

pub type Unaryop = crate::generic::Unaryop;

pub type Cmpop = crate::generic::Cmpop;

pub type Comprehension = crate::generic::Comprehension<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::Comprehension<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type Excepthandler = crate::generic::Excepthandler<TextRange>;

pub type ExcepthandlerExceptHandler = crate::generic::ExcepthandlerExceptHandler<TextRange>;

impl Ranged for crate::generic::ExcepthandlerExceptHandler<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::Excepthandler {
    fn range(&self) -> TextRange {
        match self {
            Self::ExceptHandler(node) => node.range(),
        }
    }
}

pub type Arguments = crate::generic::Arguments<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::Arguments<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type Arg = crate::generic::Arg<TextRange>;

impl Ranged for crate::generic::Arg<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type Keyword = crate::generic::Keyword<TextRange>;

impl Ranged for crate::generic::Keyword<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type Alias = crate::generic::Alias<TextRange>;

impl Ranged for crate::generic::Alias<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type Withitem = crate::generic::Withitem<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::Withitem<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type MatchCase = crate::generic::MatchCase<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::MatchCase<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type Pattern = crate::generic::Pattern<TextRange>;

pub type PatternMatchValue = crate::generic::PatternMatchValue<TextRange>;

impl Ranged for crate::generic::PatternMatchValue<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchSingleton = crate::generic::PatternMatchSingleton<TextRange>;

impl Ranged for crate::generic::PatternMatchSingleton<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchSequence = crate::generic::PatternMatchSequence<TextRange>;

impl Ranged for crate::generic::PatternMatchSequence<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchMapping = crate::generic::PatternMatchMapping<TextRange>;

impl Ranged for crate::generic::PatternMatchMapping<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchClass = crate::generic::PatternMatchClass<TextRange>;

impl Ranged for crate::generic::PatternMatchClass<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchStar = crate::generic::PatternMatchStar<TextRange>;

impl Ranged for crate::generic::PatternMatchStar<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchAs = crate::generic::PatternMatchAs<TextRange>;

impl Ranged for crate::generic::PatternMatchAs<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
pub type PatternMatchOr = crate::generic::PatternMatchOr<TextRange>;

impl Ranged for crate::generic::PatternMatchOr<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
impl Ranged for crate::Pattern {
    fn range(&self) -> TextRange {
        match self {
            Self::MatchValue(node) => node.range(),
            Self::MatchSingleton(node) => node.range(),
            Self::MatchSequence(node) => node.range(),
            Self::MatchMapping(node) => node.range(),
            Self::MatchClass(node) => node.range(),
            Self::MatchStar(node) => node.range(),
            Self::MatchAs(node) => node.range(),
            Self::MatchOr(node) => node.range(),
        }
    }
}

pub type TypeIgnore = crate::generic::TypeIgnore<TextRange>;

pub type TypeIgnoreTypeIgnore = crate::generic::TypeIgnoreTypeIgnore<TextRange>;

#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::generic::TypeIgnoreTypeIgnore<TextRange> {
    fn range(&self) -> TextRange {
        self.range
    }
}
#[cfg(feature = "all-nodes-with-ranges")]
impl Ranged for crate::TypeIgnore {
    fn range(&self) -> TextRange {
        match self {
            Self::TypeIgnore(node) => node.range(),
        }
    }
}
