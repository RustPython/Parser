// File automatically generated by ast/asdl_rs.py.

use crate::text_size::TextRange;
use crate::Ranged;
#[derive(Clone, Debug, PartialEq)]
pub struct ModModule<U = ()> {
    pub body: Vec<Stmt<U>>,
    pub type_ignores: Vec<TypeIgnore>,
    pub range: TextRange,
}

impl<U> From<ModModule<U>> for Mod<U> {
    fn from(payload: ModModule<U>) -> Self {
        Mod::Module(payload)
    }
}

impl<U> Ranged for ModModule<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ModInteractive<U = ()> {
    pub body: Vec<Stmt<U>>,
    pub range: TextRange,
}

impl<U> From<ModInteractive<U>> for Mod<U> {
    fn from(payload: ModInteractive<U>) -> Self {
        Mod::Interactive(payload)
    }
}

impl<U> Ranged for ModInteractive<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ModExpression<U = ()> {
    pub body: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ModExpression<U>> for Mod<U> {
    fn from(payload: ModExpression<U>) -> Self {
        Mod::Expression(payload)
    }
}

impl<U> Ranged for ModExpression<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ModFunctionType<U = ()> {
    pub argtypes: Vec<Expr<U>>,
    pub returns: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ModFunctionType<U>> for Mod<U> {
    fn from(payload: ModFunctionType<U>) -> Self {
        Mod::FunctionType(payload)
    }
}

impl<U> Ranged for ModFunctionType<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum Mod<U = ()> {
    Module(ModModule<U>),
    Interactive(ModInteractive<U>),
    Expression(ModExpression<U>),
    FunctionType(ModFunctionType<U>),
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtFunctionDef<U = ()> {
    pub name: Identifier,
    pub args: Box<Arguments<U>>,
    pub body: Vec<Stmt<U>>,
    pub decorator_list: Vec<Expr<U>>,
    pub returns: Option<Box<Expr<U>>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtFunctionDef<U>> for StmtKind<U> {
    fn from(payload: StmtFunctionDef<U>) -> Self {
        StmtKind::FunctionDef(payload)
    }
}

impl<U> Ranged for StmtFunctionDef<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAsyncFunctionDef<U = ()> {
    pub name: Identifier,
    pub args: Box<Arguments<U>>,
    pub body: Vec<Stmt<U>>,
    pub decorator_list: Vec<Expr<U>>,
    pub returns: Option<Box<Expr<U>>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtAsyncFunctionDef<U>> for StmtKind<U> {
    fn from(payload: StmtAsyncFunctionDef<U>) -> Self {
        StmtKind::AsyncFunctionDef(payload)
    }
}

impl<U> Ranged for StmtAsyncFunctionDef<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtClassDef<U = ()> {
    pub name: Identifier,
    pub bases: Vec<Expr<U>>,
    pub keywords: Vec<Keyword<U>>,
    pub body: Vec<Stmt<U>>,
    pub decorator_list: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<StmtClassDef<U>> for StmtKind<U> {
    fn from(payload: StmtClassDef<U>) -> Self {
        StmtKind::ClassDef(payload)
    }
}

impl<U> Ranged for StmtClassDef<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtReturn<U = ()> {
    pub value: Option<Box<Expr<U>>>,
    pub range: TextRange,
}

impl<U> From<StmtReturn<U>> for StmtKind<U> {
    fn from(payload: StmtReturn<U>) -> Self {
        StmtKind::Return(payload)
    }
}

impl<U> Ranged for StmtReturn<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtDelete<U = ()> {
    pub targets: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<StmtDelete<U>> for StmtKind<U> {
    fn from(payload: StmtDelete<U>) -> Self {
        StmtKind::Delete(payload)
    }
}

impl<U> Ranged for StmtDelete<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAssign<U = ()> {
    pub targets: Vec<Expr<U>>,
    pub value: Box<Expr<U>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtAssign<U>> for StmtKind<U> {
    fn from(payload: StmtAssign<U>) -> Self {
        StmtKind::Assign(payload)
    }
}

impl<U> Ranged for StmtAssign<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAugAssign<U = ()> {
    pub target: Box<Expr<U>>,
    pub op: Operator,
    pub value: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<StmtAugAssign<U>> for StmtKind<U> {
    fn from(payload: StmtAugAssign<U>) -> Self {
        StmtKind::AugAssign(payload)
    }
}

impl<U> Ranged for StmtAugAssign<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAnnAssign<U = ()> {
    pub target: Box<Expr<U>>,
    pub annotation: Box<Expr<U>>,
    pub value: Option<Box<Expr<U>>>,
    pub simple: bool,
    pub range: TextRange,
}

impl<U> From<StmtAnnAssign<U>> for StmtKind<U> {
    fn from(payload: StmtAnnAssign<U>) -> Self {
        StmtKind::AnnAssign(payload)
    }
}

impl<U> Ranged for StmtAnnAssign<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtFor<U = ()> {
    pub target: Box<Expr<U>>,
    pub iter: Box<Expr<U>>,
    pub body: Vec<Stmt<U>>,
    pub orelse: Vec<Stmt<U>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtFor<U>> for StmtKind<U> {
    fn from(payload: StmtFor<U>) -> Self {
        StmtKind::For(payload)
    }
}

impl<U> Ranged for StmtFor<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAsyncFor<U = ()> {
    pub target: Box<Expr<U>>,
    pub iter: Box<Expr<U>>,
    pub body: Vec<Stmt<U>>,
    pub orelse: Vec<Stmt<U>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtAsyncFor<U>> for StmtKind<U> {
    fn from(payload: StmtAsyncFor<U>) -> Self {
        StmtKind::AsyncFor(payload)
    }
}

impl<U> Ranged for StmtAsyncFor<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtWhile<U = ()> {
    pub test: Box<Expr<U>>,
    pub body: Vec<Stmt<U>>,
    pub orelse: Vec<Stmt<U>>,
    pub range: TextRange,
}

impl<U> From<StmtWhile<U>> for StmtKind<U> {
    fn from(payload: StmtWhile<U>) -> Self {
        StmtKind::While(payload)
    }
}

impl<U> Ranged for StmtWhile<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtIf<U = ()> {
    pub test: Box<Expr<U>>,
    pub body: Vec<Stmt<U>>,
    pub orelse: Vec<Stmt<U>>,
    pub range: TextRange,
}

impl<U> From<StmtIf<U>> for StmtKind<U> {
    fn from(payload: StmtIf<U>) -> Self {
        StmtKind::If(payload)
    }
}

impl<U> Ranged for StmtIf<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtWith<U = ()> {
    pub items: Vec<Withitem<U>>,
    pub body: Vec<Stmt<U>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtWith<U>> for StmtKind<U> {
    fn from(payload: StmtWith<U>) -> Self {
        StmtKind::With(payload)
    }
}

impl<U> Ranged for StmtWith<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAsyncWith<U = ()> {
    pub items: Vec<Withitem<U>>,
    pub body: Vec<Stmt<U>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}

impl<U> From<StmtAsyncWith<U>> for StmtKind<U> {
    fn from(payload: StmtAsyncWith<U>) -> Self {
        StmtKind::AsyncWith(payload)
    }
}

impl<U> Ranged for StmtAsyncWith<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtMatch<U = ()> {
    pub subject: Box<Expr<U>>,
    pub cases: Vec<MatchCase<U>>,
    pub range: TextRange,
}

impl<U> From<StmtMatch<U>> for StmtKind<U> {
    fn from(payload: StmtMatch<U>) -> Self {
        StmtKind::Match(payload)
    }
}

impl<U> Ranged for StmtMatch<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtRaise<U = ()> {
    pub exc: Option<Box<Expr<U>>>,
    pub cause: Option<Box<Expr<U>>>,
    pub range: TextRange,
}

impl<U> From<StmtRaise<U>> for StmtKind<U> {
    fn from(payload: StmtRaise<U>) -> Self {
        StmtKind::Raise(payload)
    }
}

impl<U> Ranged for StmtRaise<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtTry<U = ()> {
    pub body: Vec<Stmt<U>>,
    pub handlers: Vec<Excepthandler<U>>,
    pub orelse: Vec<Stmt<U>>,
    pub finalbody: Vec<Stmt<U>>,
    pub range: TextRange,
}

impl<U> From<StmtTry<U>> for StmtKind<U> {
    fn from(payload: StmtTry<U>) -> Self {
        StmtKind::Try(payload)
    }
}

impl<U> Ranged for StmtTry<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtTryStar<U = ()> {
    pub body: Vec<Stmt<U>>,
    pub handlers: Vec<Excepthandler<U>>,
    pub orelse: Vec<Stmt<U>>,
    pub finalbody: Vec<Stmt<U>>,
    pub range: TextRange,
}

impl<U> From<StmtTryStar<U>> for StmtKind<U> {
    fn from(payload: StmtTryStar<U>) -> Self {
        StmtKind::TryStar(payload)
    }
}

impl<U> Ranged for StmtTryStar<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtAssert<U = ()> {
    pub test: Box<Expr<U>>,
    pub msg: Option<Box<Expr<U>>>,
    pub range: TextRange,
}

impl<U> From<StmtAssert<U>> for StmtKind<U> {
    fn from(payload: StmtAssert<U>) -> Self {
        StmtKind::Assert(payload)
    }
}

impl<U> Ranged for StmtAssert<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtImport<U = ()> {
    pub names: Vec<Alias<U>>,
    pub range: TextRange,
}

impl<U> From<StmtImport<U>> for StmtKind<U> {
    fn from(payload: StmtImport<U>) -> Self {
        StmtKind::Import(payload)
    }
}

impl<U> Ranged for StmtImport<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtImportFrom<U = ()> {
    pub module: Option<Identifier>,
    pub names: Vec<Alias<U>>,
    pub level: Option<Int>,
    pub range: TextRange,
}

impl<U> From<StmtImportFrom<U>> for StmtKind<U> {
    fn from(payload: StmtImportFrom<U>) -> Self {
        StmtKind::ImportFrom(payload)
    }
}

impl<U> Ranged for StmtImportFrom<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtGlobal {
    pub names: Vec<Identifier>,
    pub range: TextRange,
}

impl From<StmtGlobal> for StmtKind {
    fn from(payload: StmtGlobal) -> Self {
        StmtKind::Global(payload)
    }
}

impl Ranged for StmtGlobal {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtNonlocal {
    pub names: Vec<Identifier>,
    pub range: TextRange,
}

impl From<StmtNonlocal> for StmtKind {
    fn from(payload: StmtNonlocal) -> Self {
        StmtKind::Nonlocal(payload)
    }
}

impl Ranged for StmtNonlocal {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtExpr<U = ()> {
    pub value: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<StmtExpr<U>> for StmtKind<U> {
    fn from(payload: StmtExpr<U>) -> Self {
        StmtKind::Expr(payload)
    }
}

impl<U> Ranged for StmtExpr<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtPass {
    pub range: TextRange,
}

impl From<StmtPass> for StmtKind {
    fn from(payload: StmtPass) -> Self {
        StmtKind::Pass(payload)
    }
}

impl Ranged for StmtPass {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtBreak {
    pub range: TextRange,
}

impl From<StmtBreak> for StmtKind {
    fn from(payload: StmtBreak) -> Self {
        StmtKind::Break(payload)
    }
}

impl Ranged for StmtBreak {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct StmtContinue {
    pub range: TextRange,
}

impl From<StmtContinue> for StmtKind {
    fn from(payload: StmtContinue) -> Self {
        StmtKind::Continue(payload)
    }
}

impl Ranged for StmtContinue {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum StmtKind<U = ()> {
    #[is(name = "function_def_stmt")]
    FunctionDef(StmtFunctionDef<U>),
    #[is(name = "async_function_def_stmt")]
    AsyncFunctionDef(StmtAsyncFunctionDef<U>),
    #[is(name = "class_def_stmt")]
    ClassDef(StmtClassDef<U>),
    #[is(name = "return_stmt")]
    Return(StmtReturn<U>),
    #[is(name = "delete_stmt")]
    Delete(StmtDelete<U>),
    #[is(name = "assign_stmt")]
    Assign(StmtAssign<U>),
    #[is(name = "aug_assign_stmt")]
    AugAssign(StmtAugAssign<U>),
    #[is(name = "ann_assign_stmt")]
    AnnAssign(StmtAnnAssign<U>),
    #[is(name = "for_stmt")]
    For(StmtFor<U>),
    #[is(name = "async_for_stmt")]
    AsyncFor(StmtAsyncFor<U>),
    #[is(name = "while_stmt")]
    While(StmtWhile<U>),
    #[is(name = "if_stmt")]
    If(StmtIf<U>),
    #[is(name = "with_stmt")]
    With(StmtWith<U>),
    #[is(name = "async_with_stmt")]
    AsyncWith(StmtAsyncWith<U>),
    #[is(name = "match_stmt")]
    Match(StmtMatch<U>),
    #[is(name = "raise_stmt")]
    Raise(StmtRaise<U>),
    #[is(name = "try_stmt")]
    Try(StmtTry<U>),
    #[is(name = "try_star_stmt")]
    TryStar(StmtTryStar<U>),
    #[is(name = "assert_stmt")]
    Assert(StmtAssert<U>),
    #[is(name = "import_stmt")]
    Import(StmtImport<U>),
    #[is(name = "import_from_stmt")]
    ImportFrom(StmtImportFrom<U>),
    #[is(name = "global_stmt")]
    Global(StmtGlobal),
    #[is(name = "nonlocal_stmt")]
    Nonlocal(StmtNonlocal),
    #[is(name = "expr_stmt")]
    Expr(StmtExpr<U>),
    #[is(name = "pass_stmt")]
    Pass(StmtPass),
    #[is(name = "break_stmt")]
    Break(StmtBreak),
    #[is(name = "continue_stmt")]
    Continue(StmtContinue),
}
pub type Stmt<U = ()> = Attributed<StmtKind<U>, U>;

#[derive(Clone, Debug, PartialEq)]
pub struct ExprBoolOp<U = ()> {
    pub op: Boolop,
    pub values: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprBoolOp<U>> for ExprKind<U> {
    fn from(payload: ExprBoolOp<U>) -> Self {
        ExprKind::BoolOp(payload)
    }
}

impl<U> Ranged for ExprBoolOp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprNamedExpr<U = ()> {
    pub target: Box<Expr<U>>,
    pub value: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprNamedExpr<U>> for ExprKind<U> {
    fn from(payload: ExprNamedExpr<U>) -> Self {
        ExprKind::NamedExpr(payload)
    }
}

impl<U> Ranged for ExprNamedExpr<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprBinOp<U = ()> {
    pub left: Box<Expr<U>>,
    pub op: Operator,
    pub right: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprBinOp<U>> for ExprKind<U> {
    fn from(payload: ExprBinOp<U>) -> Self {
        ExprKind::BinOp(payload)
    }
}

impl<U> Ranged for ExprBinOp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprUnaryOp<U = ()> {
    pub op: Unaryop,
    pub operand: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprUnaryOp<U>> for ExprKind<U> {
    fn from(payload: ExprUnaryOp<U>) -> Self {
        ExprKind::UnaryOp(payload)
    }
}

impl<U> Ranged for ExprUnaryOp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprLambda<U = ()> {
    pub args: Box<Arguments<U>>,
    pub body: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprLambda<U>> for ExprKind<U> {
    fn from(payload: ExprLambda<U>) -> Self {
        ExprKind::Lambda(payload)
    }
}

impl<U> Ranged for ExprLambda<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprIfExp<U = ()> {
    pub test: Box<Expr<U>>,
    pub body: Box<Expr<U>>,
    pub orelse: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprIfExp<U>> for ExprKind<U> {
    fn from(payload: ExprIfExp<U>) -> Self {
        ExprKind::IfExp(payload)
    }
}

impl<U> Ranged for ExprIfExp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprDict<U = ()> {
    pub keys: Vec<Option<Expr<U>>>,
    pub values: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprDict<U>> for ExprKind<U> {
    fn from(payload: ExprDict<U>) -> Self {
        ExprKind::Dict(payload)
    }
}

impl<U> Ranged for ExprDict<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprSet<U = ()> {
    pub elts: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprSet<U>> for ExprKind<U> {
    fn from(payload: ExprSet<U>) -> Self {
        ExprKind::Set(payload)
    }
}

impl<U> Ranged for ExprSet<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprListComp<U = ()> {
    pub elt: Box<Expr<U>>,
    pub generators: Vec<Comprehension<U>>,
    pub range: TextRange,
}

impl<U> From<ExprListComp<U>> for ExprKind<U> {
    fn from(payload: ExprListComp<U>) -> Self {
        ExprKind::ListComp(payload)
    }
}

impl<U> Ranged for ExprListComp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprSetComp<U = ()> {
    pub elt: Box<Expr<U>>,
    pub generators: Vec<Comprehension<U>>,
    pub range: TextRange,
}

impl<U> From<ExprSetComp<U>> for ExprKind<U> {
    fn from(payload: ExprSetComp<U>) -> Self {
        ExprKind::SetComp(payload)
    }
}

impl<U> Ranged for ExprSetComp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprDictComp<U = ()> {
    pub key: Box<Expr<U>>,
    pub value: Box<Expr<U>>,
    pub generators: Vec<Comprehension<U>>,
    pub range: TextRange,
}

impl<U> From<ExprDictComp<U>> for ExprKind<U> {
    fn from(payload: ExprDictComp<U>) -> Self {
        ExprKind::DictComp(payload)
    }
}

impl<U> Ranged for ExprDictComp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprGeneratorExp<U = ()> {
    pub elt: Box<Expr<U>>,
    pub generators: Vec<Comprehension<U>>,
    pub range: TextRange,
}

impl<U> From<ExprGeneratorExp<U>> for ExprKind<U> {
    fn from(payload: ExprGeneratorExp<U>) -> Self {
        ExprKind::GeneratorExp(payload)
    }
}

impl<U> Ranged for ExprGeneratorExp<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprAwait<U = ()> {
    pub value: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprAwait<U>> for ExprKind<U> {
    fn from(payload: ExprAwait<U>) -> Self {
        ExprKind::Await(payload)
    }
}

impl<U> Ranged for ExprAwait<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprYield<U = ()> {
    pub value: Option<Box<Expr<U>>>,
    pub range: TextRange,
}

impl<U> From<ExprYield<U>> for ExprKind<U> {
    fn from(payload: ExprYield<U>) -> Self {
        ExprKind::Yield(payload)
    }
}

impl<U> Ranged for ExprYield<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprYieldFrom<U = ()> {
    pub value: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprYieldFrom<U>> for ExprKind<U> {
    fn from(payload: ExprYieldFrom<U>) -> Self {
        ExprKind::YieldFrom(payload)
    }
}

impl<U> Ranged for ExprYieldFrom<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprCompare<U = ()> {
    pub left: Box<Expr<U>>,
    pub ops: Vec<Cmpop>,
    pub comparators: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprCompare<U>> for ExprKind<U> {
    fn from(payload: ExprCompare<U>) -> Self {
        ExprKind::Compare(payload)
    }
}

impl<U> Ranged for ExprCompare<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprCall<U = ()> {
    pub func: Box<Expr<U>>,
    pub args: Vec<Expr<U>>,
    pub keywords: Vec<Keyword<U>>,
    pub range: TextRange,
}

impl<U> From<ExprCall<U>> for ExprKind<U> {
    fn from(payload: ExprCall<U>) -> Self {
        ExprKind::Call(payload)
    }
}

impl<U> Ranged for ExprCall<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprFormattedValue<U = ()> {
    pub value: Box<Expr<U>>,
    pub conversion: Int,
    pub format_spec: Option<Box<Expr<U>>>,
    pub range: TextRange,
}

impl<U> From<ExprFormattedValue<U>> for ExprKind<U> {
    fn from(payload: ExprFormattedValue<U>) -> Self {
        ExprKind::FormattedValue(payload)
    }
}

impl<U> Ranged for ExprFormattedValue<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprJoinedStr<U = ()> {
    pub values: Vec<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<ExprJoinedStr<U>> for ExprKind<U> {
    fn from(payload: ExprJoinedStr<U>) -> Self {
        ExprKind::JoinedStr(payload)
    }
}

impl<U> Ranged for ExprJoinedStr<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprConstant {
    pub value: Constant,
    pub kind: Option<String>,
    pub range: TextRange,
}

impl From<ExprConstant> for ExprKind {
    fn from(payload: ExprConstant) -> Self {
        ExprKind::Constant(payload)
    }
}

impl Ranged for ExprConstant {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprAttribute<U = ()> {
    pub value: Box<Expr<U>>,
    pub attr: Identifier,
    pub ctx: ExprContext,
    pub range: TextRange,
}

impl<U> From<ExprAttribute<U>> for ExprKind<U> {
    fn from(payload: ExprAttribute<U>) -> Self {
        ExprKind::Attribute(payload)
    }
}

impl<U> Ranged for ExprAttribute<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprSubscript<U = ()> {
    pub value: Box<Expr<U>>,
    pub slice: Box<Expr<U>>,
    pub ctx: ExprContext,
    pub range: TextRange,
}

impl<U> From<ExprSubscript<U>> for ExprKind<U> {
    fn from(payload: ExprSubscript<U>) -> Self {
        ExprKind::Subscript(payload)
    }
}

impl<U> Ranged for ExprSubscript<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprStarred<U = ()> {
    pub value: Box<Expr<U>>,
    pub ctx: ExprContext,
    pub range: TextRange,
}

impl<U> From<ExprStarred<U>> for ExprKind<U> {
    fn from(payload: ExprStarred<U>) -> Self {
        ExprKind::Starred(payload)
    }
}

impl<U> Ranged for ExprStarred<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprName {
    pub id: Identifier,
    pub ctx: ExprContext,
    pub range: TextRange,
}

impl From<ExprName> for ExprKind {
    fn from(payload: ExprName) -> Self {
        ExprKind::Name(payload)
    }
}

impl Ranged for ExprName {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprList<U = ()> {
    pub elts: Vec<Expr<U>>,
    pub ctx: ExprContext,
    pub range: TextRange,
}

impl<U> From<ExprList<U>> for ExprKind<U> {
    fn from(payload: ExprList<U>) -> Self {
        ExprKind::List(payload)
    }
}

impl<U> Ranged for ExprList<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprTuple<U = ()> {
    pub elts: Vec<Expr<U>>,
    pub ctx: ExprContext,
    pub range: TextRange,
}

impl<U> From<ExprTuple<U>> for ExprKind<U> {
    fn from(payload: ExprTuple<U>) -> Self {
        ExprKind::Tuple(payload)
    }
}

impl<U> Ranged for ExprTuple<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExprSlice<U = ()> {
    pub lower: Option<Box<Expr<U>>>,
    pub upper: Option<Box<Expr<U>>>,
    pub step: Option<Box<Expr<U>>>,
    pub range: TextRange,
}

impl<U> From<ExprSlice<U>> for ExprKind<U> {
    fn from(payload: ExprSlice<U>) -> Self {
        ExprKind::Slice(payload)
    }
}

impl<U> Ranged for ExprSlice<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum ExprKind<U = ()> {
    #[is(name = "bool_op_expr")]
    BoolOp(ExprBoolOp<U>),
    #[is(name = "named_expr_expr")]
    NamedExpr(ExprNamedExpr<U>),
    #[is(name = "bin_op_expr")]
    BinOp(ExprBinOp<U>),
    #[is(name = "unary_op_expr")]
    UnaryOp(ExprUnaryOp<U>),
    #[is(name = "lambda_expr")]
    Lambda(ExprLambda<U>),
    #[is(name = "if_exp_expr")]
    IfExp(ExprIfExp<U>),
    #[is(name = "dict_expr")]
    Dict(ExprDict<U>),
    #[is(name = "set_expr")]
    Set(ExprSet<U>),
    #[is(name = "list_comp_expr")]
    ListComp(ExprListComp<U>),
    #[is(name = "set_comp_expr")]
    SetComp(ExprSetComp<U>),
    #[is(name = "dict_comp_expr")]
    DictComp(ExprDictComp<U>),
    #[is(name = "generator_exp_expr")]
    GeneratorExp(ExprGeneratorExp<U>),
    #[is(name = "await_expr")]
    Await(ExprAwait<U>),
    #[is(name = "yield_expr")]
    Yield(ExprYield<U>),
    #[is(name = "yield_from_expr")]
    YieldFrom(ExprYieldFrom<U>),
    #[is(name = "compare_expr")]
    Compare(ExprCompare<U>),
    #[is(name = "call_expr")]
    Call(ExprCall<U>),
    #[is(name = "formatted_value_expr")]
    FormattedValue(ExprFormattedValue<U>),
    #[is(name = "joined_str_expr")]
    JoinedStr(ExprJoinedStr<U>),
    #[is(name = "constant_expr")]
    Constant(ExprConstant),
    #[is(name = "attribute_expr")]
    Attribute(ExprAttribute<U>),
    #[is(name = "subscript_expr")]
    Subscript(ExprSubscript<U>),
    #[is(name = "starred_expr")]
    Starred(ExprStarred<U>),
    #[is(name = "name_expr")]
    Name(ExprName),
    #[is(name = "list_expr")]
    List(ExprList<U>),
    #[is(name = "tuple_expr")]
    Tuple(ExprTuple<U>),
    #[is(name = "slice_expr")]
    Slice(ExprSlice<U>),
}
pub type Expr<U = ()> = Attributed<ExprKind<U>, U>;

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum ExprContext {
    Load,
    Store,
    Del,
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum Boolop {
    And,
    Or,
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum Operator {
    Add,
    Sub,
    Mult,
    MatMult,
    Div,
    Mod,
    Pow,
    LShift,
    RShift,
    BitOr,
    BitXor,
    BitAnd,
    FloorDiv,
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum Unaryop {
    Invert,
    Not,
    UAdd,
    USub,
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum Cmpop {
    Eq,
    NotEq,
    Lt,
    LtE,
    Gt,
    GtE,
    Is,
    IsNot,
    In,
    NotIn,
}

#[derive(Clone, Debug, PartialEq)]
pub struct Comprehension<U = ()> {
    pub target: Expr<U>,
    pub iter: Expr<U>,
    pub ifs: Vec<Expr<U>>,
    pub is_async: bool,
    pub range: TextRange,
}
impl<U> Ranged for Comprehension<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ExcepthandlerExceptHandler<U = ()> {
    pub type_: Option<Box<Expr<U>>>,
    pub name: Option<Identifier>,
    pub body: Vec<Stmt<U>>,
    pub range: TextRange,
}

impl<U> From<ExcepthandlerExceptHandler<U>> for ExcepthandlerKind<U> {
    fn from(payload: ExcepthandlerExceptHandler<U>) -> Self {
        ExcepthandlerKind::ExceptHandler(payload)
    }
}

impl<U> Ranged for ExcepthandlerExceptHandler<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum ExcepthandlerKind<U = ()> {
    ExceptHandler(ExcepthandlerExceptHandler<U>),
}
pub type Excepthandler<U = ()> = Attributed<ExcepthandlerKind<U>, U>;

#[derive(Clone, Debug, PartialEq)]
pub struct Arguments<U = ()> {
    pub posonlyargs: Vec<Arg<U>>,
    pub args: Vec<Arg<U>>,
    pub vararg: Option<Box<Arg<U>>>,
    pub kwonlyargs: Vec<Arg<U>>,
    pub kw_defaults: Vec<Expr<U>>,
    pub kwarg: Option<Box<Arg<U>>>,
    pub defaults: Vec<Expr<U>>,
    pub range: TextRange,
}
impl<U> Ranged for Arguments<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct ArgData<U = ()> {
    pub arg: Identifier,
    pub annotation: Option<Box<Expr<U>>>,
    pub type_comment: Option<String>,
    pub range: TextRange,
}
impl<U> Ranged for ArgData<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

pub type Arg<U = ()> = Attributed<ArgData<U>, U>;

#[derive(Clone, Debug, PartialEq)]
pub struct KeywordData<U = ()> {
    pub arg: Option<Identifier>,
    pub value: Expr<U>,
    pub range: TextRange,
}
impl<U> Ranged for KeywordData<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

pub type Keyword<U = ()> = Attributed<KeywordData<U>, U>;

#[derive(Clone, Debug, PartialEq)]
pub struct AliasData {
    pub name: Identifier,
    pub asname: Option<Identifier>,
    pub range: TextRange,
}
impl Ranged for AliasData {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

pub type Alias<U = ()> = Attributed<AliasData, U>;

#[derive(Clone, Debug, PartialEq)]
pub struct Withitem<U = ()> {
    pub context_expr: Expr<U>,
    pub optional_vars: Option<Box<Expr<U>>>,
    pub range: TextRange,
}
impl<U> Ranged for Withitem<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct MatchCase<U = ()> {
    pub pattern: Pattern<U>,
    pub guard: Option<Box<Expr<U>>>,
    pub body: Vec<Stmt<U>>,
    pub range: TextRange,
}
impl<U> Ranged for MatchCase<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchValue<U = ()> {
    pub value: Box<Expr<U>>,
    pub range: TextRange,
}

impl<U> From<PatternMatchValue<U>> for PatternKind<U> {
    fn from(payload: PatternMatchValue<U>) -> Self {
        PatternKind::MatchValue(payload)
    }
}

impl<U> Ranged for PatternMatchValue<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchSingleton {
    pub value: Constant,
    pub range: TextRange,
}

impl From<PatternMatchSingleton> for PatternKind {
    fn from(payload: PatternMatchSingleton) -> Self {
        PatternKind::MatchSingleton(payload)
    }
}

impl Ranged for PatternMatchSingleton {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchSequence<U = ()> {
    pub patterns: Vec<Pattern<U>>,
    pub range: TextRange,
}

impl<U> From<PatternMatchSequence<U>> for PatternKind<U> {
    fn from(payload: PatternMatchSequence<U>) -> Self {
        PatternKind::MatchSequence(payload)
    }
}

impl<U> Ranged for PatternMatchSequence<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchMapping<U = ()> {
    pub keys: Vec<Expr<U>>,
    pub patterns: Vec<Pattern<U>>,
    pub rest: Option<Identifier>,
    pub range: TextRange,
}

impl<U> From<PatternMatchMapping<U>> for PatternKind<U> {
    fn from(payload: PatternMatchMapping<U>) -> Self {
        PatternKind::MatchMapping(payload)
    }
}

impl<U> Ranged for PatternMatchMapping<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchClass<U = ()> {
    pub cls: Box<Expr<U>>,
    pub patterns: Vec<Pattern<U>>,
    pub kwd_attrs: Vec<Identifier>,
    pub kwd_patterns: Vec<Pattern<U>>,
    pub range: TextRange,
}

impl<U> From<PatternMatchClass<U>> for PatternKind<U> {
    fn from(payload: PatternMatchClass<U>) -> Self {
        PatternKind::MatchClass(payload)
    }
}

impl<U> Ranged for PatternMatchClass<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchStar {
    pub name: Option<Identifier>,
    pub range: TextRange,
}

impl From<PatternMatchStar> for PatternKind {
    fn from(payload: PatternMatchStar) -> Self {
        PatternKind::MatchStar(payload)
    }
}

impl Ranged for PatternMatchStar {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchAs<U = ()> {
    pub pattern: Option<Box<Pattern<U>>>,
    pub name: Option<Identifier>,
    pub range: TextRange,
}

impl<U> From<PatternMatchAs<U>> for PatternKind<U> {
    fn from(payload: PatternMatchAs<U>) -> Self {
        PatternKind::MatchAs(payload)
    }
}

impl<U> Ranged for PatternMatchAs<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq)]
pub struct PatternMatchOr<U = ()> {
    pub patterns: Vec<Pattern<U>>,
    pub range: TextRange,
}

impl<U> From<PatternMatchOr<U>> for PatternKind<U> {
    fn from(payload: PatternMatchOr<U>) -> Self {
        PatternKind::MatchOr(payload)
    }
}

impl<U> Ranged for PatternMatchOr<U> {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum PatternKind<U = ()> {
    MatchValue(PatternMatchValue<U>),
    MatchSingleton(PatternMatchSingleton),
    MatchSequence(PatternMatchSequence<U>),
    MatchMapping(PatternMatchMapping<U>),
    MatchClass(PatternMatchClass<U>),
    MatchStar(PatternMatchStar),
    MatchAs(PatternMatchAs<U>),
    MatchOr(PatternMatchOr<U>),
}
pub type Pattern<U = ()> = Attributed<PatternKind<U>, U>;

#[derive(Clone, Debug, PartialEq)]
pub struct TypeIgnoreTypeIgnore {
    pub lineno: Int,
    pub tag: String,
    pub range: TextRange,
}

impl From<TypeIgnoreTypeIgnore> for TypeIgnore {
    fn from(payload: TypeIgnoreTypeIgnore) -> Self {
        TypeIgnore::TypeIgnore(payload)
    }
}

impl Ranged for TypeIgnoreTypeIgnore {
    #[inline]
    fn range(&self) -> TextRange {
        self.range
    }
}

#[derive(Clone, Debug, PartialEq, is_macro::Is)]
pub enum TypeIgnore {
    TypeIgnore(TypeIgnoreTypeIgnore),
}
