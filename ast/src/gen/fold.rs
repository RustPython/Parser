// File automatically generated by ast/asdl_rs.py.

use crate::fold_helpers::Foldable;
pub trait Fold<U> {
    type TargetU;
    type Error;

    fn map_user(&mut self, user: U) -> Result<Self::TargetU, Self::Error>;
    #[cfg(feature = "all-nodes-with-ranges")]
    fn map_user_cfg(&mut self, user: U) -> Result<Self::TargetU, Self::Error> {
        self.map_user(user)
    }
    #[cfg(not(feature = "all-nodes-with-ranges"))]
    fn map_user_cfg(
        &mut self,
        _user: crate::EmptyRange<U>,
    ) -> Result<crate::EmptyRange<Self::TargetU>, Self::Error> {
        Ok(crate::EmptyRange::default())
    }

    fn fold<X: Foldable<U, Self::TargetU>>(&mut self, node: X) -> Result<X::Mapped, Self::Error> {
        node.fold(self)
    }
    fn fold_mod(&mut self, node: Mod<U>) -> Result<Mod<Self::TargetU>, Self::Error> {
        fold_mod(self, node)
    }
    fn fold_stmt(&mut self, node: Stmt<U>) -> Result<Stmt<Self::TargetU>, Self::Error> {
        fold_stmt(self, node)
    }
    fn fold_expr(&mut self, node: Expr<U>) -> Result<Expr<Self::TargetU>, Self::Error> {
        fold_expr(self, node)
    }
    fn fold_expr_context(&mut self, node: ExprContext) -> Result<ExprContext, Self::Error> {
        fold_expr_context(self, node)
    }
    fn fold_boolop(&mut self, node: Boolop) -> Result<Boolop, Self::Error> {
        fold_boolop(self, node)
    }
    fn fold_operator(&mut self, node: Operator) -> Result<Operator, Self::Error> {
        fold_operator(self, node)
    }
    fn fold_unaryop(&mut self, node: Unaryop) -> Result<Unaryop, Self::Error> {
        fold_unaryop(self, node)
    }
    fn fold_cmpop(&mut self, node: Cmpop) -> Result<Cmpop, Self::Error> {
        fold_cmpop(self, node)
    }
    fn fold_comprehension(
        &mut self,
        node: Comprehension<U>,
    ) -> Result<Comprehension<Self::TargetU>, Self::Error> {
        fold_comprehension(self, node)
    }
    fn fold_excepthandler(
        &mut self,
        node: Excepthandler<U>,
    ) -> Result<Excepthandler<Self::TargetU>, Self::Error> {
        fold_excepthandler(self, node)
    }
    fn fold_arguments(
        &mut self,
        node: Arguments<U>,
    ) -> Result<Arguments<Self::TargetU>, Self::Error> {
        fold_arguments(self, node)
    }
    fn fold_arg(&mut self, node: Arg<U>) -> Result<Arg<Self::TargetU>, Self::Error> {
        fold_arg(self, node)
    }
    fn fold_keyword(&mut self, node: Keyword<U>) -> Result<Keyword<Self::TargetU>, Self::Error> {
        fold_keyword(self, node)
    }
    fn fold_alias(&mut self, node: Alias<U>) -> Result<Alias<Self::TargetU>, Self::Error> {
        fold_alias(self, node)
    }
    fn fold_withitem(&mut self, node: Withitem<U>) -> Result<Withitem<Self::TargetU>, Self::Error> {
        fold_withitem(self, node)
    }
    fn fold_match_case(
        &mut self,
        node: MatchCase<U>,
    ) -> Result<MatchCase<Self::TargetU>, Self::Error> {
        fold_match_case(self, node)
    }
    fn fold_pattern(&mut self, node: Pattern<U>) -> Result<Pattern<Self::TargetU>, Self::Error> {
        fold_pattern(self, node)
    }
    fn fold_type_ignore(
        &mut self,
        node: TypeIgnore<U>,
    ) -> Result<TypeIgnore<Self::TargetU>, Self::Error> {
        fold_type_ignore(self, node)
    }
}
impl<T, U> Foldable<T, U> for Mod<T> {
    type Mapped = Mod<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_mod(self)
    }
}
pub fn fold_mod<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Mod<U>,
) -> Result<Mod<F::TargetU>, F::Error> {
    match node {
        Mod::Module(ModModule {
            body,
            type_ignores,
            range,
        }) => {
            let range = folder.map_user_cfg(range)?;
            Ok(Mod::Module(ModModule {
                body: Foldable::fold(body, folder)?,
                type_ignores: Foldable::fold(type_ignores, folder)?,
                range,
            }))
        }
        Mod::Interactive(ModInteractive { body, range }) => {
            let range = folder.map_user_cfg(range)?;
            Ok(Mod::Interactive(ModInteractive {
                body: Foldable::fold(body, folder)?,
                range,
            }))
        }
        Mod::Expression(ModExpression { body, range }) => {
            let range = folder.map_user_cfg(range)?;
            Ok(Mod::Expression(ModExpression {
                body: Foldable::fold(body, folder)?,
                range,
            }))
        }
        Mod::FunctionType(ModFunctionType {
            argtypes,
            returns,
            range,
        }) => {
            let range = folder.map_user_cfg(range)?;
            Ok(Mod::FunctionType(ModFunctionType {
                argtypes: Foldable::fold(argtypes, folder)?,
                returns: Foldable::fold(returns, folder)?,
                range,
            }))
        }
    }
}
impl<T, U> Foldable<T, U> for Stmt<T> {
    type Mapped = Stmt<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_stmt(self)
    }
}
pub fn fold_stmt<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Stmt<U>,
) -> Result<Stmt<F::TargetU>, F::Error> {
    match node {
        Stmt::FunctionDef(StmtFunctionDef {
            name,
            args,
            body,
            decorator_list,
            returns,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::FunctionDef(StmtFunctionDef {
                name: Foldable::fold(name, folder)?,
                args: Foldable::fold(args, folder)?,
                body: Foldable::fold(body, folder)?,
                decorator_list: Foldable::fold(decorator_list, folder)?,
                returns: Foldable::fold(returns, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::AsyncFunctionDef(StmtAsyncFunctionDef {
            name,
            args,
            body,
            decorator_list,
            returns,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::AsyncFunctionDef(StmtAsyncFunctionDef {
                name: Foldable::fold(name, folder)?,
                args: Foldable::fold(args, folder)?,
                body: Foldable::fold(body, folder)?,
                decorator_list: Foldable::fold(decorator_list, folder)?,
                returns: Foldable::fold(returns, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::ClassDef(StmtClassDef {
            name,
            bases,
            keywords,
            body,
            decorator_list,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::ClassDef(StmtClassDef {
                name: Foldable::fold(name, folder)?,
                bases: Foldable::fold(bases, folder)?,
                keywords: Foldable::fold(keywords, folder)?,
                body: Foldable::fold(body, folder)?,
                decorator_list: Foldable::fold(decorator_list, folder)?,
                range,
            }))
        }
        Stmt::Return(StmtReturn { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Return(StmtReturn {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Stmt::Delete(StmtDelete { targets, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Delete(StmtDelete {
                targets: Foldable::fold(targets, folder)?,
                range,
            }))
        }
        Stmt::Assign(StmtAssign {
            targets,
            value,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Assign(StmtAssign {
                targets: Foldable::fold(targets, folder)?,
                value: Foldable::fold(value, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::AugAssign(StmtAugAssign {
            target,
            op,
            value,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::AugAssign(StmtAugAssign {
                target: Foldable::fold(target, folder)?,
                op: Foldable::fold(op, folder)?,
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Stmt::AnnAssign(StmtAnnAssign {
            target,
            annotation,
            value,
            simple,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::AnnAssign(StmtAnnAssign {
                target: Foldable::fold(target, folder)?,
                annotation: Foldable::fold(annotation, folder)?,
                value: Foldable::fold(value, folder)?,
                simple: Foldable::fold(simple, folder)?,
                range,
            }))
        }
        Stmt::For(StmtFor {
            target,
            iter,
            body,
            orelse,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::For(StmtFor {
                target: Foldable::fold(target, folder)?,
                iter: Foldable::fold(iter, folder)?,
                body: Foldable::fold(body, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::AsyncFor(StmtAsyncFor {
            target,
            iter,
            body,
            orelse,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::AsyncFor(StmtAsyncFor {
                target: Foldable::fold(target, folder)?,
                iter: Foldable::fold(iter, folder)?,
                body: Foldable::fold(body, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::While(StmtWhile {
            test,
            body,
            orelse,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::While(StmtWhile {
                test: Foldable::fold(test, folder)?,
                body: Foldable::fold(body, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                range,
            }))
        }
        Stmt::If(StmtIf {
            test,
            body,
            orelse,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::If(StmtIf {
                test: Foldable::fold(test, folder)?,
                body: Foldable::fold(body, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                range,
            }))
        }
        Stmt::With(StmtWith {
            items,
            body,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::With(StmtWith {
                items: Foldable::fold(items, folder)?,
                body: Foldable::fold(body, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::AsyncWith(StmtAsyncWith {
            items,
            body,
            type_comment,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::AsyncWith(StmtAsyncWith {
                items: Foldable::fold(items, folder)?,
                body: Foldable::fold(body, folder)?,
                type_comment: Foldable::fold(type_comment, folder)?,
                range,
            }))
        }
        Stmt::Match(StmtMatch {
            subject,
            cases,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Match(StmtMatch {
                subject: Foldable::fold(subject, folder)?,
                cases: Foldable::fold(cases, folder)?,
                range,
            }))
        }
        Stmt::Raise(StmtRaise { exc, cause, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Raise(StmtRaise {
                exc: Foldable::fold(exc, folder)?,
                cause: Foldable::fold(cause, folder)?,
                range,
            }))
        }
        Stmt::Try(StmtTry {
            body,
            handlers,
            orelse,
            finalbody,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Try(StmtTry {
                body: Foldable::fold(body, folder)?,
                handlers: Foldable::fold(handlers, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                finalbody: Foldable::fold(finalbody, folder)?,
                range,
            }))
        }
        Stmt::TryStar(StmtTryStar {
            body,
            handlers,
            orelse,
            finalbody,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::TryStar(StmtTryStar {
                body: Foldable::fold(body, folder)?,
                handlers: Foldable::fold(handlers, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                finalbody: Foldable::fold(finalbody, folder)?,
                range,
            }))
        }
        Stmt::Assert(StmtAssert { test, msg, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Assert(StmtAssert {
                test: Foldable::fold(test, folder)?,
                msg: Foldable::fold(msg, folder)?,
                range,
            }))
        }
        Stmt::Import(StmtImport { names, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Import(StmtImport {
                names: Foldable::fold(names, folder)?,
                range,
            }))
        }
        Stmt::ImportFrom(StmtImportFrom {
            module,
            names,
            level,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::ImportFrom(StmtImportFrom {
                module: Foldable::fold(module, folder)?,
                names: Foldable::fold(names, folder)?,
                level: Foldable::fold(level, folder)?,
                range,
            }))
        }
        Stmt::Global(StmtGlobal { names, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Global(StmtGlobal {
                names: Foldable::fold(names, folder)?,
                range,
            }))
        }
        Stmt::Nonlocal(StmtNonlocal { names, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Nonlocal(StmtNonlocal {
                names: Foldable::fold(names, folder)?,
                range,
            }))
        }
        Stmt::Expr(StmtExpr { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Expr(StmtExpr {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Stmt::Pass(StmtPass { range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Pass(StmtPass { range }))
        }
        Stmt::Break(StmtBreak { range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Break(StmtBreak { range }))
        }
        Stmt::Continue(StmtContinue { range }) => {
            let range = folder.map_user(range)?;
            Ok(Stmt::Continue(StmtContinue { range }))
        }
    }
}
impl<T, U> Foldable<T, U> for Expr<T> {
    type Mapped = Expr<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_expr(self)
    }
}
pub fn fold_expr<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Expr<U>,
) -> Result<Expr<F::TargetU>, F::Error> {
    match node {
        Expr::BoolOp(ExprBoolOp { op, values, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::BoolOp(ExprBoolOp {
                op: Foldable::fold(op, folder)?,
                values: Foldable::fold(values, folder)?,
                range,
            }))
        }
        Expr::NamedExpr(ExprNamedExpr {
            target,
            value,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::NamedExpr(ExprNamedExpr {
                target: Foldable::fold(target, folder)?,
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Expr::BinOp(ExprBinOp {
            left,
            op,
            right,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::BinOp(ExprBinOp {
                left: Foldable::fold(left, folder)?,
                op: Foldable::fold(op, folder)?,
                right: Foldable::fold(right, folder)?,
                range,
            }))
        }
        Expr::UnaryOp(ExprUnaryOp { op, operand, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::UnaryOp(ExprUnaryOp {
                op: Foldable::fold(op, folder)?,
                operand: Foldable::fold(operand, folder)?,
                range,
            }))
        }
        Expr::Lambda(ExprLambda { args, body, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Lambda(ExprLambda {
                args: Foldable::fold(args, folder)?,
                body: Foldable::fold(body, folder)?,
                range,
            }))
        }
        Expr::IfExp(ExprIfExp {
            test,
            body,
            orelse,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::IfExp(ExprIfExp {
                test: Foldable::fold(test, folder)?,
                body: Foldable::fold(body, folder)?,
                orelse: Foldable::fold(orelse, folder)?,
                range,
            }))
        }
        Expr::Dict(ExprDict {
            keys,
            values,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Dict(ExprDict {
                keys: Foldable::fold(keys, folder)?,
                values: Foldable::fold(values, folder)?,
                range,
            }))
        }
        Expr::Set(ExprSet { elts, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Set(ExprSet {
                elts: Foldable::fold(elts, folder)?,
                range,
            }))
        }
        Expr::ListComp(ExprListComp {
            elt,
            generators,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::ListComp(ExprListComp {
                elt: Foldable::fold(elt, folder)?,
                generators: Foldable::fold(generators, folder)?,
                range,
            }))
        }
        Expr::SetComp(ExprSetComp {
            elt,
            generators,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::SetComp(ExprSetComp {
                elt: Foldable::fold(elt, folder)?,
                generators: Foldable::fold(generators, folder)?,
                range,
            }))
        }
        Expr::DictComp(ExprDictComp {
            key,
            value,
            generators,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::DictComp(ExprDictComp {
                key: Foldable::fold(key, folder)?,
                value: Foldable::fold(value, folder)?,
                generators: Foldable::fold(generators, folder)?,
                range,
            }))
        }
        Expr::GeneratorExp(ExprGeneratorExp {
            elt,
            generators,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::GeneratorExp(ExprGeneratorExp {
                elt: Foldable::fold(elt, folder)?,
                generators: Foldable::fold(generators, folder)?,
                range,
            }))
        }
        Expr::Await(ExprAwait { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Await(ExprAwait {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Expr::Yield(ExprYield { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Yield(ExprYield {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Expr::YieldFrom(ExprYieldFrom { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::YieldFrom(ExprYieldFrom {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Expr::Compare(ExprCompare {
            left,
            ops,
            comparators,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Compare(ExprCompare {
                left: Foldable::fold(left, folder)?,
                ops: Foldable::fold(ops, folder)?,
                comparators: Foldable::fold(comparators, folder)?,
                range,
            }))
        }
        Expr::Call(ExprCall {
            func,
            args,
            keywords,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Call(ExprCall {
                func: Foldable::fold(func, folder)?,
                args: Foldable::fold(args, folder)?,
                keywords: Foldable::fold(keywords, folder)?,
                range,
            }))
        }
        Expr::FormattedValue(ExprFormattedValue {
            value,
            conversion,
            format_spec,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::FormattedValue(ExprFormattedValue {
                value: Foldable::fold(value, folder)?,
                conversion: Foldable::fold(conversion, folder)?,
                format_spec: Foldable::fold(format_spec, folder)?,
                range,
            }))
        }
        Expr::JoinedStr(ExprJoinedStr { values, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::JoinedStr(ExprJoinedStr {
                values: Foldable::fold(values, folder)?,
                range,
            }))
        }
        Expr::Constant(ExprConstant { value, kind, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Constant(ExprConstant {
                value: Foldable::fold(value, folder)?,
                kind: Foldable::fold(kind, folder)?,
                range,
            }))
        }
        Expr::Attribute(ExprAttribute {
            value,
            attr,
            ctx,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Attribute(ExprAttribute {
                value: Foldable::fold(value, folder)?,
                attr: Foldable::fold(attr, folder)?,
                ctx: Foldable::fold(ctx, folder)?,
                range,
            }))
        }
        Expr::Subscript(ExprSubscript {
            value,
            slice,
            ctx,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Subscript(ExprSubscript {
                value: Foldable::fold(value, folder)?,
                slice: Foldable::fold(slice, folder)?,
                ctx: Foldable::fold(ctx, folder)?,
                range,
            }))
        }
        Expr::Starred(ExprStarred { value, ctx, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Starred(ExprStarred {
                value: Foldable::fold(value, folder)?,
                ctx: Foldable::fold(ctx, folder)?,
                range,
            }))
        }
        Expr::Name(ExprName { id, ctx, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Name(ExprName {
                id: Foldable::fold(id, folder)?,
                ctx: Foldable::fold(ctx, folder)?,
                range,
            }))
        }
        Expr::List(ExprList { elts, ctx, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::List(ExprList {
                elts: Foldable::fold(elts, folder)?,
                ctx: Foldable::fold(ctx, folder)?,
                range,
            }))
        }
        Expr::Tuple(ExprTuple { elts, ctx, range }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Tuple(ExprTuple {
                elts: Foldable::fold(elts, folder)?,
                ctx: Foldable::fold(ctx, folder)?,
                range,
            }))
        }
        Expr::Slice(ExprSlice {
            lower,
            upper,
            step,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Expr::Slice(ExprSlice {
                lower: Foldable::fold(lower, folder)?,
                upper: Foldable::fold(upper, folder)?,
                step: Foldable::fold(step, folder)?,
                range,
            }))
        }
    }
}
impl<T, U> Foldable<T, U> for ExprContext {
    type Mapped = ExprContext;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_expr_context(self)
    }
}
pub fn fold_expr_context<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: ExprContext,
) -> Result<ExprContext, F::Error> {
    Ok(node)
}
impl<T, U> Foldable<T, U> for Boolop {
    type Mapped = Boolop;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_boolop(self)
    }
}
pub fn fold_boolop<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Boolop,
) -> Result<Boolop, F::Error> {
    Ok(node)
}
impl<T, U> Foldable<T, U> for Operator {
    type Mapped = Operator;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_operator(self)
    }
}
pub fn fold_operator<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Operator,
) -> Result<Operator, F::Error> {
    Ok(node)
}
impl<T, U> Foldable<T, U> for Unaryop {
    type Mapped = Unaryop;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_unaryop(self)
    }
}
pub fn fold_unaryop<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Unaryop,
) -> Result<Unaryop, F::Error> {
    Ok(node)
}
impl<T, U> Foldable<T, U> for Cmpop {
    type Mapped = Cmpop;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_cmpop(self)
    }
}
pub fn fold_cmpop<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Cmpop,
) -> Result<Cmpop, F::Error> {
    Ok(node)
}
impl<T, U> Foldable<T, U> for Comprehension<T> {
    type Mapped = Comprehension<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_comprehension(self)
    }
}
pub fn fold_comprehension<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Comprehension<U>,
) -> Result<Comprehension<F::TargetU>, F::Error> {
    let Comprehension {
        target,
        iter,
        ifs,
        is_async,
        range,
    } = node;
    let range = folder.map_user_cfg(range)?;
    Ok(Comprehension {
        target: Foldable::fold(target, folder)?,
        iter: Foldable::fold(iter, folder)?,
        ifs: Foldable::fold(ifs, folder)?,
        is_async: Foldable::fold(is_async, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for Excepthandler<T> {
    type Mapped = Excepthandler<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_excepthandler(self)
    }
}
pub fn fold_excepthandler<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Excepthandler<U>,
) -> Result<Excepthandler<F::TargetU>, F::Error> {
    match node {
        Excepthandler::ExceptHandler(ExcepthandlerExceptHandler {
            type_,
            name,
            body,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Excepthandler::ExceptHandler(ExcepthandlerExceptHandler {
                type_: Foldable::fold(type_, folder)?,
                name: Foldable::fold(name, folder)?,
                body: Foldable::fold(body, folder)?,
                range,
            }))
        }
    }
}
impl<T, U> Foldable<T, U> for Arguments<T> {
    type Mapped = Arguments<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_arguments(self)
    }
}
pub fn fold_arguments<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Arguments<U>,
) -> Result<Arguments<F::TargetU>, F::Error> {
    let Arguments {
        posonlyargs,
        args,
        vararg,
        kwonlyargs,
        kw_defaults,
        kwarg,
        defaults,
        range,
    } = node;
    let range = folder.map_user_cfg(range)?;
    Ok(Arguments {
        posonlyargs: Foldable::fold(posonlyargs, folder)?,
        args: Foldable::fold(args, folder)?,
        vararg: Foldable::fold(vararg, folder)?,
        kwonlyargs: Foldable::fold(kwonlyargs, folder)?,
        kw_defaults: Foldable::fold(kw_defaults, folder)?,
        kwarg: Foldable::fold(kwarg, folder)?,
        defaults: Foldable::fold(defaults, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for Arg<T> {
    type Mapped = Arg<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_arg(self)
    }
}
pub fn fold_arg<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Arg<U>,
) -> Result<Arg<F::TargetU>, F::Error> {
    let Arg {
        arg,
        annotation,
        type_comment,
        range,
    } = node;
    let range = folder.map_user(range)?;
    Ok(Arg {
        arg: Foldable::fold(arg, folder)?,
        annotation: Foldable::fold(annotation, folder)?,
        type_comment: Foldable::fold(type_comment, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for Keyword<T> {
    type Mapped = Keyword<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_keyword(self)
    }
}
pub fn fold_keyword<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Keyword<U>,
) -> Result<Keyword<F::TargetU>, F::Error> {
    let Keyword { arg, value, range } = node;
    let range = folder.map_user(range)?;
    Ok(Keyword {
        arg: Foldable::fold(arg, folder)?,
        value: Foldable::fold(value, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for Alias<T> {
    type Mapped = Alias<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_alias(self)
    }
}
pub fn fold_alias<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Alias<U>,
) -> Result<Alias<F::TargetU>, F::Error> {
    let Alias {
        name,
        asname,
        range,
    } = node;
    let range = folder.map_user(range)?;
    Ok(Alias {
        name: Foldable::fold(name, folder)?,
        asname: Foldable::fold(asname, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for Withitem<T> {
    type Mapped = Withitem<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_withitem(self)
    }
}
pub fn fold_withitem<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Withitem<U>,
) -> Result<Withitem<F::TargetU>, F::Error> {
    let Withitem {
        context_expr,
        optional_vars,
        range,
    } = node;
    let range = folder.map_user_cfg(range)?;
    Ok(Withitem {
        context_expr: Foldable::fold(context_expr, folder)?,
        optional_vars: Foldable::fold(optional_vars, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for MatchCase<T> {
    type Mapped = MatchCase<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_match_case(self)
    }
}
pub fn fold_match_case<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: MatchCase<U>,
) -> Result<MatchCase<F::TargetU>, F::Error> {
    let MatchCase {
        pattern,
        guard,
        body,
        range,
    } = node;
    let range = folder.map_user_cfg(range)?;
    Ok(MatchCase {
        pattern: Foldable::fold(pattern, folder)?,
        guard: Foldable::fold(guard, folder)?,
        body: Foldable::fold(body, folder)?,
        range,
    })
}
impl<T, U> Foldable<T, U> for Pattern<T> {
    type Mapped = Pattern<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_pattern(self)
    }
}
pub fn fold_pattern<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: Pattern<U>,
) -> Result<Pattern<F::TargetU>, F::Error> {
    match node {
        Pattern::MatchValue(PatternMatchValue { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchValue(PatternMatchValue {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Pattern::MatchSingleton(PatternMatchSingleton { value, range }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchSingleton(PatternMatchSingleton {
                value: Foldable::fold(value, folder)?,
                range,
            }))
        }
        Pattern::MatchSequence(PatternMatchSequence { patterns, range }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchSequence(PatternMatchSequence {
                patterns: Foldable::fold(patterns, folder)?,
                range,
            }))
        }
        Pattern::MatchMapping(PatternMatchMapping {
            keys,
            patterns,
            rest,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchMapping(PatternMatchMapping {
                keys: Foldable::fold(keys, folder)?,
                patterns: Foldable::fold(patterns, folder)?,
                rest: Foldable::fold(rest, folder)?,
                range,
            }))
        }
        Pattern::MatchClass(PatternMatchClass {
            cls,
            patterns,
            kwd_attrs,
            kwd_patterns,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchClass(PatternMatchClass {
                cls: Foldable::fold(cls, folder)?,
                patterns: Foldable::fold(patterns, folder)?,
                kwd_attrs: Foldable::fold(kwd_attrs, folder)?,
                kwd_patterns: Foldable::fold(kwd_patterns, folder)?,
                range,
            }))
        }
        Pattern::MatchStar(PatternMatchStar { name, range }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchStar(PatternMatchStar {
                name: Foldable::fold(name, folder)?,
                range,
            }))
        }
        Pattern::MatchAs(PatternMatchAs {
            pattern,
            name,
            range,
        }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchAs(PatternMatchAs {
                pattern: Foldable::fold(pattern, folder)?,
                name: Foldable::fold(name, folder)?,
                range,
            }))
        }
        Pattern::MatchOr(PatternMatchOr { patterns, range }) => {
            let range = folder.map_user(range)?;
            Ok(Pattern::MatchOr(PatternMatchOr {
                patterns: Foldable::fold(patterns, folder)?,
                range,
            }))
        }
    }
}
impl<T, U> Foldable<T, U> for TypeIgnore<T> {
    type Mapped = TypeIgnore<U>;
    fn fold<F: Fold<T, TargetU = U> + ?Sized>(
        self,
        folder: &mut F,
    ) -> Result<Self::Mapped, F::Error> {
        folder.fold_type_ignore(self)
    }
}
pub fn fold_type_ignore<U, F: Fold<U> + ?Sized>(
    #[allow(unused)] folder: &mut F,
    node: TypeIgnore<U>,
) -> Result<TypeIgnore<F::TargetU>, F::Error> {
    match node {
        TypeIgnore::TypeIgnore(TypeIgnoreTypeIgnore { lineno, tag, range }) => {
            let range = folder.map_user_cfg(range)?;
            Ok(TypeIgnore::TypeIgnore(TypeIgnoreTypeIgnore {
                lineno: Foldable::fold(lineno, folder)?,
                tag: Foldable::fold(tag, folder)?,
                range,
            }))
        }
    }
}
