// File automatically generated by ast/asdl_rs.py.

#[pyclass(module="rustpython_ast.located", name="_mod", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct Mod;

impl From<&'static ast::Mod<SourceRange>> for Mod {
    fn from(_node: &'static ast::Mod<SourceRange>) -> Self {
        Mod
    }
}

#[pymethods]
impl Mod {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for Mod {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Mod<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::Module(cons) => cons.to_py_wrapper(py),
            Self::Interactive(cons) => cons.to_py_wrapper(py),
            Self::Expression(cons) => cons.to_py_wrapper(py),
            Self::FunctionType(cons) => cons.to_py_wrapper(py),
        }
    }
}

#[pyclass(module="rustpython_ast.located", name="_Module", extends=Mod, frozen)]
#[derive(Clone, Debug)]
pub struct ModModule(pub &'static ast::ModModule<SourceRange>);

impl From<&'static ast::ModModule<SourceRange>> for ModModule {
    fn from(node: &'static ast::ModModule<SourceRange>) -> Self {
        ModModule(node)
    }
}

impl ToPyObject for ModModule {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Mod)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ModModule<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ModModule(self).to_object(py))
    }
}

#[pymethods]
impl ModModule {
    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_ignores(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_ignores.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Interactive", extends=Mod, frozen)]
#[derive(Clone, Debug)]
pub struct ModInteractive(pub &'static ast::ModInteractive<SourceRange>);

impl From<&'static ast::ModInteractive<SourceRange>> for ModInteractive {
    fn from(node: &'static ast::ModInteractive<SourceRange>) -> Self {
        ModInteractive(node)
    }
}

impl ToPyObject for ModInteractive {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Mod)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ModInteractive<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ModInteractive(self).to_object(py))
    }
}

#[pymethods]
impl ModInteractive {
    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Expression", extends=Mod, frozen)]
#[derive(Clone, Debug)]
pub struct ModExpression(pub &'static ast::ModExpression<SourceRange>);

impl From<&'static ast::ModExpression<SourceRange>> for ModExpression {
    fn from(node: &'static ast::ModExpression<SourceRange>) -> Self {
        ModExpression(node)
    }
}

impl ToPyObject for ModExpression {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Mod)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ModExpression<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ModExpression(self).to_object(py))
    }
}

#[pymethods]
impl ModExpression {
    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_FunctionType", extends=Mod, frozen)]
#[derive(Clone, Debug)]
pub struct ModFunctionType(pub &'static ast::ModFunctionType<SourceRange>);

impl From<&'static ast::ModFunctionType<SourceRange>> for ModFunctionType {
    fn from(node: &'static ast::ModFunctionType<SourceRange>) -> Self {
        ModFunctionType(node)
    }
}

impl ToPyObject for ModFunctionType {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Mod)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ModFunctionType<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ModFunctionType(self).to_object(py))
    }
}

#[pymethods]
impl ModFunctionType {
    #[getter]
    #[inline]
    fn get_argtypes(&self, py: Python) -> PyResult<PyObject> {
        self.0.argtypes.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_returns(&self, py: Python) -> PyResult<PyObject> {
        self.0.returns.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_stmt", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct Stmt;

impl From<&'static ast::Stmt<SourceRange>> for Stmt {
    fn from(_node: &'static ast::Stmt<SourceRange>) -> Self {
        Stmt
    }
}

#[pymethods]
impl Stmt {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for Stmt {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Stmt<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::FunctionDef(cons) => cons.to_py_wrapper(py),
            Self::AsyncFunctionDef(cons) => cons.to_py_wrapper(py),
            Self::ClassDef(cons) => cons.to_py_wrapper(py),
            Self::Return(cons) => cons.to_py_wrapper(py),
            Self::Delete(cons) => cons.to_py_wrapper(py),
            Self::Assign(cons) => cons.to_py_wrapper(py),
            Self::AugAssign(cons) => cons.to_py_wrapper(py),
            Self::AnnAssign(cons) => cons.to_py_wrapper(py),
            Self::For(cons) => cons.to_py_wrapper(py),
            Self::AsyncFor(cons) => cons.to_py_wrapper(py),
            Self::While(cons) => cons.to_py_wrapper(py),
            Self::If(cons) => cons.to_py_wrapper(py),
            Self::With(cons) => cons.to_py_wrapper(py),
            Self::AsyncWith(cons) => cons.to_py_wrapper(py),
            Self::Match(cons) => cons.to_py_wrapper(py),
            Self::Raise(cons) => cons.to_py_wrapper(py),
            Self::Try(cons) => cons.to_py_wrapper(py),
            Self::TryStar(cons) => cons.to_py_wrapper(py),
            Self::Assert(cons) => cons.to_py_wrapper(py),
            Self::Import(cons) => cons.to_py_wrapper(py),
            Self::ImportFrom(cons) => cons.to_py_wrapper(py),
            Self::Global(cons) => cons.to_py_wrapper(py),
            Self::Nonlocal(cons) => cons.to_py_wrapper(py),
            Self::Expr(cons) => cons.to_py_wrapper(py),
            Self::Pass(cons) => cons.to_py_wrapper(py),
            Self::Break(cons) => cons.to_py_wrapper(py),
            Self::Continue(cons) => cons.to_py_wrapper(py),
        }
    }
}

#[pyclass(module="rustpython_ast.located", name="_FunctionDef", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtFunctionDef(pub &'static ast::StmtFunctionDef<SourceRange>);

impl From<&'static ast::StmtFunctionDef<SourceRange>> for StmtFunctionDef {
    fn from(node: &'static ast::StmtFunctionDef<SourceRange>) -> Self {
        StmtFunctionDef(node)
    }
}

impl ToPyObject for StmtFunctionDef {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtFunctionDef<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtFunctionDef(self).to_object(py))
    }
}

#[pymethods]
impl StmtFunctionDef {
    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_args(&self, py: Python) -> PyResult<PyObject> {
        self.0.args.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_decorator_list(&self, py: Python) -> PyResult<PyObject> {
        self.0.decorator_list.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_returns(&self, py: Python) -> PyResult<PyObject> {
        self.0.returns.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_AsyncFunctionDef", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAsyncFunctionDef(pub &'static ast::StmtAsyncFunctionDef<SourceRange>);

impl From<&'static ast::StmtAsyncFunctionDef<SourceRange>> for StmtAsyncFunctionDef {
    fn from(node: &'static ast::StmtAsyncFunctionDef<SourceRange>) -> Self {
        StmtAsyncFunctionDef(node)
    }
}

impl ToPyObject for StmtAsyncFunctionDef {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAsyncFunctionDef<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAsyncFunctionDef(self).to_object(py))
    }
}

#[pymethods]
impl StmtAsyncFunctionDef {
    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_args(&self, py: Python) -> PyResult<PyObject> {
        self.0.args.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_decorator_list(&self, py: Python) -> PyResult<PyObject> {
        self.0.decorator_list.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_returns(&self, py: Python) -> PyResult<PyObject> {
        self.0.returns.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_ClassDef", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtClassDef(pub &'static ast::StmtClassDef<SourceRange>);

impl From<&'static ast::StmtClassDef<SourceRange>> for StmtClassDef {
    fn from(node: &'static ast::StmtClassDef<SourceRange>) -> Self {
        StmtClassDef(node)
    }
}

impl ToPyObject for StmtClassDef {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtClassDef<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtClassDef(self).to_object(py))
    }
}

#[pymethods]
impl StmtClassDef {
    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_bases(&self, py: Python) -> PyResult<PyObject> {
        self.0.bases.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_keywords(&self, py: Python) -> PyResult<PyObject> {
        self.0.keywords.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_decorator_list(&self, py: Python) -> PyResult<PyObject> {
        self.0.decorator_list.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Return", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtReturn(pub &'static ast::StmtReturn<SourceRange>);

impl From<&'static ast::StmtReturn<SourceRange>> for StmtReturn {
    fn from(node: &'static ast::StmtReturn<SourceRange>) -> Self {
        StmtReturn(node)
    }
}

impl ToPyObject for StmtReturn {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtReturn<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtReturn(self).to_object(py))
    }
}

#[pymethods]
impl StmtReturn {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Delete", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtDelete(pub &'static ast::StmtDelete<SourceRange>);

impl From<&'static ast::StmtDelete<SourceRange>> for StmtDelete {
    fn from(node: &'static ast::StmtDelete<SourceRange>) -> Self {
        StmtDelete(node)
    }
}

impl ToPyObject for StmtDelete {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtDelete<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtDelete(self).to_object(py))
    }
}

#[pymethods]
impl StmtDelete {
    #[getter]
    #[inline]
    fn get_targets(&self, py: Python) -> PyResult<PyObject> {
        self.0.targets.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Assign", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAssign(pub &'static ast::StmtAssign<SourceRange>);

impl From<&'static ast::StmtAssign<SourceRange>> for StmtAssign {
    fn from(node: &'static ast::StmtAssign<SourceRange>) -> Self {
        StmtAssign(node)
    }
}

impl ToPyObject for StmtAssign {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAssign<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAssign(self).to_object(py))
    }
}

#[pymethods]
impl StmtAssign {
    #[getter]
    #[inline]
    fn get_targets(&self, py: Python) -> PyResult<PyObject> {
        self.0.targets.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_AugAssign", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAugAssign(pub &'static ast::StmtAugAssign<SourceRange>);

impl From<&'static ast::StmtAugAssign<SourceRange>> for StmtAugAssign {
    fn from(node: &'static ast::StmtAugAssign<SourceRange>) -> Self {
        StmtAugAssign(node)
    }
}

impl ToPyObject for StmtAugAssign {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAugAssign<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAugAssign(self).to_object(py))
    }
}

#[pymethods]
impl StmtAugAssign {
    #[getter]
    #[inline]
    fn get_target(&self, py: Python) -> PyResult<PyObject> {
        self.0.target.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_op(&self, py: Python) -> PyResult<PyObject> {
        self.0.op.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_AnnAssign", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAnnAssign(pub &'static ast::StmtAnnAssign<SourceRange>);

impl From<&'static ast::StmtAnnAssign<SourceRange>> for StmtAnnAssign {
    fn from(node: &'static ast::StmtAnnAssign<SourceRange>) -> Self {
        StmtAnnAssign(node)
    }
}

impl ToPyObject for StmtAnnAssign {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAnnAssign<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAnnAssign(self).to_object(py))
    }
}

#[pymethods]
impl StmtAnnAssign {
    #[getter]
    #[inline]
    fn get_target(&self, py: Python) -> PyResult<PyObject> {
        self.0.target.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_annotation(&self, py: Python) -> PyResult<PyObject> {
        self.0.annotation.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_simple(&self, py: Python) -> PyResult<PyObject> {
        self.0.simple.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_For", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtFor(pub &'static ast::StmtFor<SourceRange>);

impl From<&'static ast::StmtFor<SourceRange>> for StmtFor {
    fn from(node: &'static ast::StmtFor<SourceRange>) -> Self {
        StmtFor(node)
    }
}

impl ToPyObject for StmtFor {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtFor<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtFor(self).to_object(py))
    }
}

#[pymethods]
impl StmtFor {
    #[getter]
    #[inline]
    fn get_target(&self, py: Python) -> PyResult<PyObject> {
        self.0.target.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_iter(&self, py: Python) -> PyResult<PyObject> {
        self.0.iter.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_AsyncFor", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAsyncFor(pub &'static ast::StmtAsyncFor<SourceRange>);

impl From<&'static ast::StmtAsyncFor<SourceRange>> for StmtAsyncFor {
    fn from(node: &'static ast::StmtAsyncFor<SourceRange>) -> Self {
        StmtAsyncFor(node)
    }
}

impl ToPyObject for StmtAsyncFor {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAsyncFor<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAsyncFor(self).to_object(py))
    }
}

#[pymethods]
impl StmtAsyncFor {
    #[getter]
    #[inline]
    fn get_target(&self, py: Python) -> PyResult<PyObject> {
        self.0.target.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_iter(&self, py: Python) -> PyResult<PyObject> {
        self.0.iter.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_While", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtWhile(pub &'static ast::StmtWhile<SourceRange>);

impl From<&'static ast::StmtWhile<SourceRange>> for StmtWhile {
    fn from(node: &'static ast::StmtWhile<SourceRange>) -> Self {
        StmtWhile(node)
    }
}

impl ToPyObject for StmtWhile {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtWhile<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtWhile(self).to_object(py))
    }
}

#[pymethods]
impl StmtWhile {
    #[getter]
    #[inline]
    fn get_test(&self, py: Python) -> PyResult<PyObject> {
        self.0.test.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_If", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtIf(pub &'static ast::StmtIf<SourceRange>);

impl From<&'static ast::StmtIf<SourceRange>> for StmtIf {
    fn from(node: &'static ast::StmtIf<SourceRange>) -> Self {
        StmtIf(node)
    }
}

impl ToPyObject for StmtIf {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtIf<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtIf(self).to_object(py))
    }
}

#[pymethods]
impl StmtIf {
    #[getter]
    #[inline]
    fn get_test(&self, py: Python) -> PyResult<PyObject> {
        self.0.test.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_With", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtWith(pub &'static ast::StmtWith<SourceRange>);

impl From<&'static ast::StmtWith<SourceRange>> for StmtWith {
    fn from(node: &'static ast::StmtWith<SourceRange>) -> Self {
        StmtWith(node)
    }
}

impl ToPyObject for StmtWith {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtWith<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtWith(self).to_object(py))
    }
}

#[pymethods]
impl StmtWith {
    #[getter]
    #[inline]
    fn get_items(&self, py: Python) -> PyResult<PyObject> {
        self.0.items.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_AsyncWith", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAsyncWith(pub &'static ast::StmtAsyncWith<SourceRange>);

impl From<&'static ast::StmtAsyncWith<SourceRange>> for StmtAsyncWith {
    fn from(node: &'static ast::StmtAsyncWith<SourceRange>) -> Self {
        StmtAsyncWith(node)
    }
}

impl ToPyObject for StmtAsyncWith {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAsyncWith<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAsyncWith(self).to_object(py))
    }
}

#[pymethods]
impl StmtAsyncWith {
    #[getter]
    #[inline]
    fn get_items(&self, py: Python) -> PyResult<PyObject> {
        self.0.items.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Match", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtMatch(pub &'static ast::StmtMatch<SourceRange>);

impl From<&'static ast::StmtMatch<SourceRange>> for StmtMatch {
    fn from(node: &'static ast::StmtMatch<SourceRange>) -> Self {
        StmtMatch(node)
    }
}

impl ToPyObject for StmtMatch {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtMatch<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtMatch(self).to_object(py))
    }
}

#[pymethods]
impl StmtMatch {
    #[getter]
    #[inline]
    fn get_subject(&self, py: Python) -> PyResult<PyObject> {
        self.0.subject.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_cases(&self, py: Python) -> PyResult<PyObject> {
        self.0.cases.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Raise", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtRaise(pub &'static ast::StmtRaise<SourceRange>);

impl From<&'static ast::StmtRaise<SourceRange>> for StmtRaise {
    fn from(node: &'static ast::StmtRaise<SourceRange>) -> Self {
        StmtRaise(node)
    }
}

impl ToPyObject for StmtRaise {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtRaise<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtRaise(self).to_object(py))
    }
}

#[pymethods]
impl StmtRaise {
    #[getter]
    #[inline]
    fn get_exc(&self, py: Python) -> PyResult<PyObject> {
        self.0.exc.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_cause(&self, py: Python) -> PyResult<PyObject> {
        self.0.cause.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Try", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtTry(pub &'static ast::StmtTry<SourceRange>);

impl From<&'static ast::StmtTry<SourceRange>> for StmtTry {
    fn from(node: &'static ast::StmtTry<SourceRange>) -> Self {
        StmtTry(node)
    }
}

impl ToPyObject for StmtTry {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtTry<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtTry(self).to_object(py))
    }
}

#[pymethods]
impl StmtTry {
    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_handlers(&self, py: Python) -> PyResult<PyObject> {
        self.0.handlers.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_finalbody(&self, py: Python) -> PyResult<PyObject> {
        self.0.finalbody.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_TryStar", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtTryStar(pub &'static ast::StmtTryStar<SourceRange>);

impl From<&'static ast::StmtTryStar<SourceRange>> for StmtTryStar {
    fn from(node: &'static ast::StmtTryStar<SourceRange>) -> Self {
        StmtTryStar(node)
    }
}

impl ToPyObject for StmtTryStar {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtTryStar<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtTryStar(self).to_object(py))
    }
}

#[pymethods]
impl StmtTryStar {
    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_handlers(&self, py: Python) -> PyResult<PyObject> {
        self.0.handlers.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_finalbody(&self, py: Python) -> PyResult<PyObject> {
        self.0.finalbody.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Assert", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtAssert(pub &'static ast::StmtAssert<SourceRange>);

impl From<&'static ast::StmtAssert<SourceRange>> for StmtAssert {
    fn from(node: &'static ast::StmtAssert<SourceRange>) -> Self {
        StmtAssert(node)
    }
}

impl ToPyObject for StmtAssert {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtAssert<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtAssert(self).to_object(py))
    }
}

#[pymethods]
impl StmtAssert {
    #[getter]
    #[inline]
    fn get_test(&self, py: Python) -> PyResult<PyObject> {
        self.0.test.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_msg(&self, py: Python) -> PyResult<PyObject> {
        self.0.msg.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Import", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtImport(pub &'static ast::StmtImport<SourceRange>);

impl From<&'static ast::StmtImport<SourceRange>> for StmtImport {
    fn from(node: &'static ast::StmtImport<SourceRange>) -> Self {
        StmtImport(node)
    }
}

impl ToPyObject for StmtImport {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtImport<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtImport(self).to_object(py))
    }
}

#[pymethods]
impl StmtImport {
    #[getter]
    #[inline]
    fn get_names(&self, py: Python) -> PyResult<PyObject> {
        self.0.names.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_ImportFrom", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtImportFrom(pub &'static ast::StmtImportFrom<SourceRange>);

impl From<&'static ast::StmtImportFrom<SourceRange>> for StmtImportFrom {
    fn from(node: &'static ast::StmtImportFrom<SourceRange>) -> Self {
        StmtImportFrom(node)
    }
}

impl ToPyObject for StmtImportFrom {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtImportFrom<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtImportFrom(self).to_object(py))
    }
}

#[pymethods]
impl StmtImportFrom {
    #[getter]
    #[inline]
    fn get_module(&self, py: Python) -> PyResult<PyObject> {
        self.0.module.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_names(&self, py: Python) -> PyResult<PyObject> {
        self.0.names.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_level(&self, py: Python) -> PyResult<PyObject> {
        self.0.level.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Global", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtGlobal(pub &'static ast::StmtGlobal<SourceRange>);

impl From<&'static ast::StmtGlobal<SourceRange>> for StmtGlobal {
    fn from(node: &'static ast::StmtGlobal<SourceRange>) -> Self {
        StmtGlobal(node)
    }
}

impl ToPyObject for StmtGlobal {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtGlobal<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtGlobal(self).to_object(py))
    }
}

#[pymethods]
impl StmtGlobal {
    #[getter]
    #[inline]
    fn get_names(&self, py: Python) -> PyResult<PyObject> {
        self.0.names.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Nonlocal", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtNonlocal(pub &'static ast::StmtNonlocal<SourceRange>);

impl From<&'static ast::StmtNonlocal<SourceRange>> for StmtNonlocal {
    fn from(node: &'static ast::StmtNonlocal<SourceRange>) -> Self {
        StmtNonlocal(node)
    }
}

impl ToPyObject for StmtNonlocal {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtNonlocal<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtNonlocal(self).to_object(py))
    }
}

#[pymethods]
impl StmtNonlocal {
    #[getter]
    #[inline]
    fn get_names(&self, py: Python) -> PyResult<PyObject> {
        self.0.names.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Expr", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtExpr(pub &'static ast::StmtExpr<SourceRange>);

impl From<&'static ast::StmtExpr<SourceRange>> for StmtExpr {
    fn from(node: &'static ast::StmtExpr<SourceRange>) -> Self {
        StmtExpr(node)
    }
}

impl ToPyObject for StmtExpr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtExpr<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtExpr(self).to_object(py))
    }
}

#[pymethods]
impl StmtExpr {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Pass", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtPass(pub &'static ast::StmtPass<SourceRange>);

impl From<&'static ast::StmtPass<SourceRange>> for StmtPass {
    fn from(node: &'static ast::StmtPass<SourceRange>) -> Self {
        StmtPass(node)
    }
}

impl ToPyObject for StmtPass {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtPass<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtPass(self).to_object(py))
    }
}

#[pymethods]
impl StmtPass {}

#[pyclass(module="rustpython_ast.located", name="_Break", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtBreak(pub &'static ast::StmtBreak<SourceRange>);

impl From<&'static ast::StmtBreak<SourceRange>> for StmtBreak {
    fn from(node: &'static ast::StmtBreak<SourceRange>) -> Self {
        StmtBreak(node)
    }
}

impl ToPyObject for StmtBreak {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtBreak<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtBreak(self).to_object(py))
    }
}

#[pymethods]
impl StmtBreak {}

#[pyclass(module="rustpython_ast.located", name="_Continue", extends=Stmt, frozen)]
#[derive(Clone, Debug)]
pub struct StmtContinue(pub &'static ast::StmtContinue<SourceRange>);

impl From<&'static ast::StmtContinue<SourceRange>> for StmtContinue {
    fn from(node: &'static ast::StmtContinue<SourceRange>) -> Self {
        StmtContinue(node)
    }
}

impl ToPyObject for StmtContinue {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Stmt)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::StmtContinue<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(StmtContinue(self).to_object(py))
    }
}

#[pymethods]
impl StmtContinue {}

#[pyclass(module="rustpython_ast.located", name="_expr", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct Expr;

impl From<&'static ast::Expr<SourceRange>> for Expr {
    fn from(_node: &'static ast::Expr<SourceRange>) -> Self {
        Expr
    }
}

#[pymethods]
impl Expr {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for Expr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Expr<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::BoolOp(cons) => cons.to_py_wrapper(py),
            Self::NamedExpr(cons) => cons.to_py_wrapper(py),
            Self::BinOp(cons) => cons.to_py_wrapper(py),
            Self::UnaryOp(cons) => cons.to_py_wrapper(py),
            Self::Lambda(cons) => cons.to_py_wrapper(py),
            Self::IfExp(cons) => cons.to_py_wrapper(py),
            Self::Dict(cons) => cons.to_py_wrapper(py),
            Self::Set(cons) => cons.to_py_wrapper(py),
            Self::ListComp(cons) => cons.to_py_wrapper(py),
            Self::SetComp(cons) => cons.to_py_wrapper(py),
            Self::DictComp(cons) => cons.to_py_wrapper(py),
            Self::GeneratorExp(cons) => cons.to_py_wrapper(py),
            Self::Await(cons) => cons.to_py_wrapper(py),
            Self::Yield(cons) => cons.to_py_wrapper(py),
            Self::YieldFrom(cons) => cons.to_py_wrapper(py),
            Self::Compare(cons) => cons.to_py_wrapper(py),
            Self::Call(cons) => cons.to_py_wrapper(py),
            Self::FormattedValue(cons) => cons.to_py_wrapper(py),
            Self::JoinedStr(cons) => cons.to_py_wrapper(py),
            Self::Constant(cons) => cons.to_py_wrapper(py),
            Self::Attribute(cons) => cons.to_py_wrapper(py),
            Self::Subscript(cons) => cons.to_py_wrapper(py),
            Self::Starred(cons) => cons.to_py_wrapper(py),
            Self::Name(cons) => cons.to_py_wrapper(py),
            Self::List(cons) => cons.to_py_wrapper(py),
            Self::Tuple(cons) => cons.to_py_wrapper(py),
            Self::Slice(cons) => cons.to_py_wrapper(py),
        }
    }
}

#[pyclass(module="rustpython_ast.located", name="_BoolOp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprBoolOp(pub &'static ast::ExprBoolOp<SourceRange>);

impl From<&'static ast::ExprBoolOp<SourceRange>> for ExprBoolOp {
    fn from(node: &'static ast::ExprBoolOp<SourceRange>) -> Self {
        ExprBoolOp(node)
    }
}

impl ToPyObject for ExprBoolOp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprBoolOp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprBoolOp(self).to_object(py))
    }
}

#[pymethods]
impl ExprBoolOp {
    #[getter]
    #[inline]
    fn get_op(&self, py: Python) -> PyResult<PyObject> {
        self.0.op.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_values(&self, py: Python) -> PyResult<PyObject> {
        self.0.values.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_NamedExpr", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprNamedExpr(pub &'static ast::ExprNamedExpr<SourceRange>);

impl From<&'static ast::ExprNamedExpr<SourceRange>> for ExprNamedExpr {
    fn from(node: &'static ast::ExprNamedExpr<SourceRange>) -> Self {
        ExprNamedExpr(node)
    }
}

impl ToPyObject for ExprNamedExpr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprNamedExpr<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprNamedExpr(self).to_object(py))
    }
}

#[pymethods]
impl ExprNamedExpr {
    #[getter]
    #[inline]
    fn get_target(&self, py: Python) -> PyResult<PyObject> {
        self.0.target.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_BinOp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprBinOp(pub &'static ast::ExprBinOp<SourceRange>);

impl From<&'static ast::ExprBinOp<SourceRange>> for ExprBinOp {
    fn from(node: &'static ast::ExprBinOp<SourceRange>) -> Self {
        ExprBinOp(node)
    }
}

impl ToPyObject for ExprBinOp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprBinOp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprBinOp(self).to_object(py))
    }
}

#[pymethods]
impl ExprBinOp {
    #[getter]
    #[inline]
    fn get_left(&self, py: Python) -> PyResult<PyObject> {
        self.0.left.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_op(&self, py: Python) -> PyResult<PyObject> {
        self.0.op.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_right(&self, py: Python) -> PyResult<PyObject> {
        self.0.right.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_UnaryOp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprUnaryOp(pub &'static ast::ExprUnaryOp<SourceRange>);

impl From<&'static ast::ExprUnaryOp<SourceRange>> for ExprUnaryOp {
    fn from(node: &'static ast::ExprUnaryOp<SourceRange>) -> Self {
        ExprUnaryOp(node)
    }
}

impl ToPyObject for ExprUnaryOp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprUnaryOp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprUnaryOp(self).to_object(py))
    }
}

#[pymethods]
impl ExprUnaryOp {
    #[getter]
    #[inline]
    fn get_op(&self, py: Python) -> PyResult<PyObject> {
        self.0.op.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_operand(&self, py: Python) -> PyResult<PyObject> {
        self.0.operand.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Lambda", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprLambda(pub &'static ast::ExprLambda<SourceRange>);

impl From<&'static ast::ExprLambda<SourceRange>> for ExprLambda {
    fn from(node: &'static ast::ExprLambda<SourceRange>) -> Self {
        ExprLambda(node)
    }
}

impl ToPyObject for ExprLambda {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprLambda<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprLambda(self).to_object(py))
    }
}

#[pymethods]
impl ExprLambda {
    #[getter]
    #[inline]
    fn get_args(&self, py: Python) -> PyResult<PyObject> {
        self.0.args.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_IfExp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprIfExp(pub &'static ast::ExprIfExp<SourceRange>);

impl From<&'static ast::ExprIfExp<SourceRange>> for ExprIfExp {
    fn from(node: &'static ast::ExprIfExp<SourceRange>) -> Self {
        ExprIfExp(node)
    }
}

impl ToPyObject for ExprIfExp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprIfExp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprIfExp(self).to_object(py))
    }
}

#[pymethods]
impl ExprIfExp {
    #[getter]
    #[inline]
    fn get_test(&self, py: Python) -> PyResult<PyObject> {
        self.0.test.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_orelse(&self, py: Python) -> PyResult<PyObject> {
        self.0.orelse.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Dict", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprDict(pub &'static ast::ExprDict<SourceRange>);

impl From<&'static ast::ExprDict<SourceRange>> for ExprDict {
    fn from(node: &'static ast::ExprDict<SourceRange>) -> Self {
        ExprDict(node)
    }
}

impl ToPyObject for ExprDict {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprDict<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprDict(self).to_object(py))
    }
}

#[pymethods]
impl ExprDict {
    #[getter]
    #[inline]
    fn get_keys(&self, py: Python) -> PyResult<PyObject> {
        self.0.keys.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_values(&self, py: Python) -> PyResult<PyObject> {
        self.0.values.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Set", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprSet(pub &'static ast::ExprSet<SourceRange>);

impl From<&'static ast::ExprSet<SourceRange>> for ExprSet {
    fn from(node: &'static ast::ExprSet<SourceRange>) -> Self {
        ExprSet(node)
    }
}

impl ToPyObject for ExprSet {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprSet<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprSet(self).to_object(py))
    }
}

#[pymethods]
impl ExprSet {
    #[getter]
    #[inline]
    fn get_elts(&self, py: Python) -> PyResult<PyObject> {
        self.0.elts.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_ListComp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprListComp(pub &'static ast::ExprListComp<SourceRange>);

impl From<&'static ast::ExprListComp<SourceRange>> for ExprListComp {
    fn from(node: &'static ast::ExprListComp<SourceRange>) -> Self {
        ExprListComp(node)
    }
}

impl ToPyObject for ExprListComp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprListComp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprListComp(self).to_object(py))
    }
}

#[pymethods]
impl ExprListComp {
    #[getter]
    #[inline]
    fn get_elt(&self, py: Python) -> PyResult<PyObject> {
        self.0.elt.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_generators(&self, py: Python) -> PyResult<PyObject> {
        self.0.generators.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_SetComp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprSetComp(pub &'static ast::ExprSetComp<SourceRange>);

impl From<&'static ast::ExprSetComp<SourceRange>> for ExprSetComp {
    fn from(node: &'static ast::ExprSetComp<SourceRange>) -> Self {
        ExprSetComp(node)
    }
}

impl ToPyObject for ExprSetComp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprSetComp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprSetComp(self).to_object(py))
    }
}

#[pymethods]
impl ExprSetComp {
    #[getter]
    #[inline]
    fn get_elt(&self, py: Python) -> PyResult<PyObject> {
        self.0.elt.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_generators(&self, py: Python) -> PyResult<PyObject> {
        self.0.generators.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_DictComp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprDictComp(pub &'static ast::ExprDictComp<SourceRange>);

impl From<&'static ast::ExprDictComp<SourceRange>> for ExprDictComp {
    fn from(node: &'static ast::ExprDictComp<SourceRange>) -> Self {
        ExprDictComp(node)
    }
}

impl ToPyObject for ExprDictComp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprDictComp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprDictComp(self).to_object(py))
    }
}

#[pymethods]
impl ExprDictComp {
    #[getter]
    #[inline]
    fn get_key(&self, py: Python) -> PyResult<PyObject> {
        self.0.key.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_generators(&self, py: Python) -> PyResult<PyObject> {
        self.0.generators.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_GeneratorExp", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprGeneratorExp(pub &'static ast::ExprGeneratorExp<SourceRange>);

impl From<&'static ast::ExprGeneratorExp<SourceRange>> for ExprGeneratorExp {
    fn from(node: &'static ast::ExprGeneratorExp<SourceRange>) -> Self {
        ExprGeneratorExp(node)
    }
}

impl ToPyObject for ExprGeneratorExp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprGeneratorExp<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprGeneratorExp(self).to_object(py))
    }
}

#[pymethods]
impl ExprGeneratorExp {
    #[getter]
    #[inline]
    fn get_elt(&self, py: Python) -> PyResult<PyObject> {
        self.0.elt.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_generators(&self, py: Python) -> PyResult<PyObject> {
        self.0.generators.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Await", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprAwait(pub &'static ast::ExprAwait<SourceRange>);

impl From<&'static ast::ExprAwait<SourceRange>> for ExprAwait {
    fn from(node: &'static ast::ExprAwait<SourceRange>) -> Self {
        ExprAwait(node)
    }
}

impl ToPyObject for ExprAwait {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprAwait<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprAwait(self).to_object(py))
    }
}

#[pymethods]
impl ExprAwait {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Yield", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprYield(pub &'static ast::ExprYield<SourceRange>);

impl From<&'static ast::ExprYield<SourceRange>> for ExprYield {
    fn from(node: &'static ast::ExprYield<SourceRange>) -> Self {
        ExprYield(node)
    }
}

impl ToPyObject for ExprYield {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprYield<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprYield(self).to_object(py))
    }
}

#[pymethods]
impl ExprYield {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_YieldFrom", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprYieldFrom(pub &'static ast::ExprYieldFrom<SourceRange>);

impl From<&'static ast::ExprYieldFrom<SourceRange>> for ExprYieldFrom {
    fn from(node: &'static ast::ExprYieldFrom<SourceRange>) -> Self {
        ExprYieldFrom(node)
    }
}

impl ToPyObject for ExprYieldFrom {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprYieldFrom<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprYieldFrom(self).to_object(py))
    }
}

#[pymethods]
impl ExprYieldFrom {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Compare", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprCompare(pub &'static ast::ExprCompare<SourceRange>);

impl From<&'static ast::ExprCompare<SourceRange>> for ExprCompare {
    fn from(node: &'static ast::ExprCompare<SourceRange>) -> Self {
        ExprCompare(node)
    }
}

impl ToPyObject for ExprCompare {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprCompare<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprCompare(self).to_object(py))
    }
}

#[pymethods]
impl ExprCompare {
    #[getter]
    #[inline]
    fn get_left(&self, py: Python) -> PyResult<PyObject> {
        self.0.left.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ops(&self, py: Python) -> PyResult<PyObject> {
        self.0.ops.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_comparators(&self, py: Python) -> PyResult<PyObject> {
        self.0.comparators.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Call", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprCall(pub &'static ast::ExprCall<SourceRange>);

impl From<&'static ast::ExprCall<SourceRange>> for ExprCall {
    fn from(node: &'static ast::ExprCall<SourceRange>) -> Self {
        ExprCall(node)
    }
}

impl ToPyObject for ExprCall {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprCall<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprCall(self).to_object(py))
    }
}

#[pymethods]
impl ExprCall {
    #[getter]
    #[inline]
    fn get_func(&self, py: Python) -> PyResult<PyObject> {
        self.0.func.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_args(&self, py: Python) -> PyResult<PyObject> {
        self.0.args.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_keywords(&self, py: Python) -> PyResult<PyObject> {
        self.0.keywords.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_FormattedValue", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprFormattedValue(pub &'static ast::ExprFormattedValue<SourceRange>);

impl From<&'static ast::ExprFormattedValue<SourceRange>> for ExprFormattedValue {
    fn from(node: &'static ast::ExprFormattedValue<SourceRange>) -> Self {
        ExprFormattedValue(node)
    }
}

impl ToPyObject for ExprFormattedValue {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprFormattedValue<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprFormattedValue(self).to_object(py))
    }
}

#[pymethods]
impl ExprFormattedValue {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_conversion(&self, py: Python) -> PyResult<PyObject> {
        self.0.conversion.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_format_spec(&self, py: Python) -> PyResult<PyObject> {
        self.0.format_spec.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_JoinedStr", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprJoinedStr(pub &'static ast::ExprJoinedStr<SourceRange>);

impl From<&'static ast::ExprJoinedStr<SourceRange>> for ExprJoinedStr {
    fn from(node: &'static ast::ExprJoinedStr<SourceRange>) -> Self {
        ExprJoinedStr(node)
    }
}

impl ToPyObject for ExprJoinedStr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprJoinedStr<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprJoinedStr(self).to_object(py))
    }
}

#[pymethods]
impl ExprJoinedStr {
    #[getter]
    #[inline]
    fn get_values(&self, py: Python) -> PyResult<PyObject> {
        self.0.values.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Constant", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprConstant(pub &'static ast::ExprConstant<SourceRange>);

impl From<&'static ast::ExprConstant<SourceRange>> for ExprConstant {
    fn from(node: &'static ast::ExprConstant<SourceRange>) -> Self {
        ExprConstant(node)
    }
}

impl ToPyObject for ExprConstant {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprConstant<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprConstant(self).to_object(py))
    }
}

#[pymethods]
impl ExprConstant {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_kind(&self, py: Python) -> PyResult<PyObject> {
        self.0.kind.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Attribute", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprAttribute(pub &'static ast::ExprAttribute<SourceRange>);

impl From<&'static ast::ExprAttribute<SourceRange>> for ExprAttribute {
    fn from(node: &'static ast::ExprAttribute<SourceRange>) -> Self {
        ExprAttribute(node)
    }
}

impl ToPyObject for ExprAttribute {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprAttribute<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprAttribute(self).to_object(py))
    }
}

#[pymethods]
impl ExprAttribute {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_attr(&self, py: Python) -> PyResult<PyObject> {
        self.0.attr.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ctx(&self, py: Python) -> PyResult<PyObject> {
        self.0.ctx.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Subscript", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprSubscript(pub &'static ast::ExprSubscript<SourceRange>);

impl From<&'static ast::ExprSubscript<SourceRange>> for ExprSubscript {
    fn from(node: &'static ast::ExprSubscript<SourceRange>) -> Self {
        ExprSubscript(node)
    }
}

impl ToPyObject for ExprSubscript {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprSubscript<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprSubscript(self).to_object(py))
    }
}

#[pymethods]
impl ExprSubscript {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_slice(&self, py: Python) -> PyResult<PyObject> {
        self.0.slice.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ctx(&self, py: Python) -> PyResult<PyObject> {
        self.0.ctx.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Starred", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprStarred(pub &'static ast::ExprStarred<SourceRange>);

impl From<&'static ast::ExprStarred<SourceRange>> for ExprStarred {
    fn from(node: &'static ast::ExprStarred<SourceRange>) -> Self {
        ExprStarred(node)
    }
}

impl ToPyObject for ExprStarred {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprStarred<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprStarred(self).to_object(py))
    }
}

#[pymethods]
impl ExprStarred {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ctx(&self, py: Python) -> PyResult<PyObject> {
        self.0.ctx.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Name", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprName(pub &'static ast::ExprName<SourceRange>);

impl From<&'static ast::ExprName<SourceRange>> for ExprName {
    fn from(node: &'static ast::ExprName<SourceRange>) -> Self {
        ExprName(node)
    }
}

impl ToPyObject for ExprName {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprName<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprName(self).to_object(py))
    }
}

#[pymethods]
impl ExprName {
    #[getter]
    #[inline]
    fn get_id(&self, py: Python) -> PyResult<PyObject> {
        self.0.id.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ctx(&self, py: Python) -> PyResult<PyObject> {
        self.0.ctx.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_List", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprList(pub &'static ast::ExprList<SourceRange>);

impl From<&'static ast::ExprList<SourceRange>> for ExprList {
    fn from(node: &'static ast::ExprList<SourceRange>) -> Self {
        ExprList(node)
    }
}

impl ToPyObject for ExprList {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprList<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprList(self).to_object(py))
    }
}

#[pymethods]
impl ExprList {
    #[getter]
    #[inline]
    fn get_elts(&self, py: Python) -> PyResult<PyObject> {
        self.0.elts.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ctx(&self, py: Python) -> PyResult<PyObject> {
        self.0.ctx.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Tuple", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprTuple(pub &'static ast::ExprTuple<SourceRange>);

impl From<&'static ast::ExprTuple<SourceRange>> for ExprTuple {
    fn from(node: &'static ast::ExprTuple<SourceRange>) -> Self {
        ExprTuple(node)
    }
}

impl ToPyObject for ExprTuple {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprTuple<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprTuple(self).to_object(py))
    }
}

#[pymethods]
impl ExprTuple {
    #[getter]
    #[inline]
    fn get_elts(&self, py: Python) -> PyResult<PyObject> {
        self.0.elts.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ctx(&self, py: Python) -> PyResult<PyObject> {
        self.0.ctx.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Slice", extends=Expr, frozen)]
#[derive(Clone, Debug)]
pub struct ExprSlice(pub &'static ast::ExprSlice<SourceRange>);

impl From<&'static ast::ExprSlice<SourceRange>> for ExprSlice {
    fn from(node: &'static ast::ExprSlice<SourceRange>) -> Self {
        ExprSlice(node)
    }
}

impl ToPyObject for ExprSlice {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Expr)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExprSlice<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprSlice(self).to_object(py))
    }
}

#[pymethods]
impl ExprSlice {
    #[getter]
    #[inline]
    fn get_lower(&self, py: Python) -> PyResult<PyObject> {
        self.0.lower.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_upper(&self, py: Python) -> PyResult<PyObject> {
        self.0.upper.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_step(&self, py: Python) -> PyResult<PyObject> {
        self.0.step.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_expr_context", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct ExprContext;

impl From<&'static ast::ExprContext> for ExprContext {
    fn from(_node: &'static ast::ExprContext) -> Self {
        ExprContext
    }
}

#[pymethods]
impl ExprContext {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for ExprContext {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Load", extends=ExprContext)]
pub struct ExprContextLoad;

impl ToPyObject for ExprContextLoad {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(ExprContext)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Store", extends=ExprContext)]
pub struct ExprContextStore;

impl ToPyObject for ExprContextStore {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(ExprContext)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Del", extends=ExprContext)]
pub struct ExprContextDel;

impl ToPyObject for ExprContextDel {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(ExprContext)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_boolop", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct BoolOp;

impl From<&'static ast::BoolOp> for BoolOp {
    fn from(_node: &'static ast::BoolOp) -> Self {
        BoolOp
    }
}

#[pymethods]
impl BoolOp {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for BoolOp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_And", extends=BoolOp)]
pub struct BoolOpAnd;

impl ToPyObject for BoolOpAnd {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(BoolOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Or", extends=BoolOp)]
pub struct BoolOpOr;

impl ToPyObject for BoolOpOr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(BoolOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_operator", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct Operator;

impl From<&'static ast::Operator> for Operator {
    fn from(_node: &'static ast::Operator) -> Self {
        Operator
    }
}

#[pymethods]
impl Operator {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for Operator {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Add", extends=Operator)]
pub struct OperatorAdd;

impl ToPyObject for OperatorAdd {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Sub", extends=Operator)]
pub struct OperatorSub;

impl ToPyObject for OperatorSub {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Mult", extends=Operator)]
pub struct OperatorMult;

impl ToPyObject for OperatorMult {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatMult", extends=Operator)]
pub struct OperatorMatMult;

impl ToPyObject for OperatorMatMult {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Div", extends=Operator)]
pub struct OperatorDiv;

impl ToPyObject for OperatorDiv {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Mod", extends=Operator)]
pub struct OperatorMod;

impl ToPyObject for OperatorMod {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Pow", extends=Operator)]
pub struct OperatorPow;

impl ToPyObject for OperatorPow {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_LShift", extends=Operator)]
pub struct OperatorLShift;

impl ToPyObject for OperatorLShift {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_RShift", extends=Operator)]
pub struct OperatorRShift;

impl ToPyObject for OperatorRShift {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_BitOr", extends=Operator)]
pub struct OperatorBitOr;

impl ToPyObject for OperatorBitOr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_BitXor", extends=Operator)]
pub struct OperatorBitXor;

impl ToPyObject for OperatorBitXor {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_BitAnd", extends=Operator)]
pub struct OperatorBitAnd;

impl ToPyObject for OperatorBitAnd {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_FloorDiv", extends=Operator)]
pub struct OperatorFloorDiv;

impl ToPyObject for OperatorFloorDiv {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Operator)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_unaryop", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct UnaryOp;

impl From<&'static ast::UnaryOp> for UnaryOp {
    fn from(_node: &'static ast::UnaryOp) -> Self {
        UnaryOp
    }
}

#[pymethods]
impl UnaryOp {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for UnaryOp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Invert", extends=UnaryOp)]
pub struct UnaryOpInvert;

impl ToPyObject for UnaryOpInvert {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(UnaryOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Not", extends=UnaryOp)]
pub struct UnaryOpNot;

impl ToPyObject for UnaryOpNot {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(UnaryOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_UAdd", extends=UnaryOp)]
pub struct UnaryOpUAdd;

impl ToPyObject for UnaryOpUAdd {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(UnaryOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_USub", extends=UnaryOp)]
pub struct UnaryOpUSub;

impl ToPyObject for UnaryOpUSub {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(UnaryOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_cmpop", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct CmpOp;

impl From<&'static ast::CmpOp> for CmpOp {
    fn from(_node: &'static ast::CmpOp) -> Self {
        CmpOp
    }
}

#[pymethods]
impl CmpOp {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for CmpOp {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Eq", extends=CmpOp)]
pub struct CmpOpEq;

impl ToPyObject for CmpOpEq {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_NotEq", extends=CmpOp)]
pub struct CmpOpNotEq;

impl ToPyObject for CmpOpNotEq {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Lt", extends=CmpOp)]
pub struct CmpOpLt;

impl ToPyObject for CmpOpLt {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_LtE", extends=CmpOp)]
pub struct CmpOpLtE;

impl ToPyObject for CmpOpLtE {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Gt", extends=CmpOp)]
pub struct CmpOpGt;

impl ToPyObject for CmpOpGt {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_GtE", extends=CmpOp)]
pub struct CmpOpGtE;

impl ToPyObject for CmpOpGtE {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_Is", extends=CmpOp)]
pub struct CmpOpIs;

impl ToPyObject for CmpOpIs {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_IsNot", extends=CmpOp)]
pub struct CmpOpIsNot;

impl ToPyObject for CmpOpIsNot {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_In", extends=CmpOp)]
pub struct CmpOpIn;

impl ToPyObject for CmpOpIn {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_NotIn", extends=CmpOp)]
pub struct CmpOpNotIn;

impl ToPyObject for CmpOpNotIn {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(CmpOp)
            .add_subclass(Self);
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_comprehension", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct Comprehension(pub &'static ast::Comprehension<SourceRange>);

impl From<&'static ast::Comprehension<SourceRange>> for Comprehension {
    fn from(node: &'static ast::Comprehension<SourceRange>) -> Self {
        Comprehension(node)
    }
}

impl ToPyObject for Comprehension {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Comprehension<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(Comprehension(self).to_object(py))
    }
}

#[pymethods]
impl Comprehension {
    #[getter]
    #[inline]
    fn get_target(&self, py: Python) -> PyResult<PyObject> {
        self.0.target.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_iter(&self, py: Python) -> PyResult<PyObject> {
        self.0.iter.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_ifs(&self, py: Python) -> PyResult<PyObject> {
        self.0.ifs.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_is_async(&self, py: Python) -> PyResult<PyObject> {
        self.0.is_async.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_excepthandler", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct ExceptHandler;

impl From<&'static ast::ExceptHandler<SourceRange>> for ExceptHandler {
    fn from(_node: &'static ast::ExceptHandler<SourceRange>) -> Self {
        ExceptHandler
    }
}

#[pymethods]
impl ExceptHandler {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for ExceptHandler {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExceptHandler<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::ExceptHandler(cons) => cons.to_py_wrapper(py),
        }
    }
}

#[pyclass(module="rustpython_ast.located", name="_ExceptHandler", extends=ExceptHandler, frozen)]
#[derive(Clone, Debug)]
pub struct ExceptHandlerExceptHandler(pub &'static ast::ExceptHandlerExceptHandler<SourceRange>);

impl From<&'static ast::ExceptHandlerExceptHandler<SourceRange>> for ExceptHandlerExceptHandler {
    fn from(node: &'static ast::ExceptHandlerExceptHandler<SourceRange>) -> Self {
        ExceptHandlerExceptHandler(node)
    }
}

impl ToPyObject for ExceptHandlerExceptHandler {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(ExceptHandler)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::ExceptHandlerExceptHandler<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExceptHandlerExceptHandler(self).to_object(py))
    }
}

#[pymethods]
impl ExceptHandlerExceptHandler {
    #[getter]
    #[inline]
    fn get_type(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_arguments", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct Arguments(pub &'static ast::PythonArguments<SourceRange>);

impl From<&'static ast::PythonArguments<SourceRange>> for Arguments {
    fn from(node: &'static ast::PythonArguments<SourceRange>) -> Self {
        Arguments(node)
    }
}

impl ToPyObject for Arguments {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PythonArguments<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(Arguments(self).to_object(py))
    }
}

#[pymethods]
impl Arguments {
    #[getter]
    #[inline]
    fn get_posonlyargs(&self, py: Python) -> PyResult<PyObject> {
        self.0.posonlyargs.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_args(&self, py: Python) -> PyResult<PyObject> {
        self.0.args.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_vararg(&self, py: Python) -> PyResult<PyObject> {
        self.0.vararg.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_kwonlyargs(&self, py: Python) -> PyResult<PyObject> {
        self.0.kwonlyargs.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_kw_defaults(&self, py: Python) -> PyResult<PyObject> {
        self.0.kw_defaults.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_kwarg(&self, py: Python) -> PyResult<PyObject> {
        self.0.kwarg.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_defaults(&self, py: Python) -> PyResult<PyObject> {
        self.0.defaults.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_arg", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct Arg(pub &'static ast::Arg<SourceRange>);

impl From<&'static ast::Arg<SourceRange>> for Arg {
    fn from(node: &'static ast::Arg<SourceRange>) -> Self {
        Arg(node)
    }
}

impl ToPyObject for Arg {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Arg<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(Arg(self).to_object(py))
    }
}

#[pymethods]
impl Arg {
    #[getter]
    #[inline]
    fn get_arg(&self, py: Python) -> PyResult<PyObject> {
        self.0.arg.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_annotation(&self, py: Python) -> PyResult<PyObject> {
        self.0.annotation.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_type_comment(&self, py: Python) -> PyResult<PyObject> {
        self.0.type_comment.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_keyword", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct Keyword(pub &'static ast::Keyword<SourceRange>);

impl From<&'static ast::Keyword<SourceRange>> for Keyword {
    fn from(node: &'static ast::Keyword<SourceRange>) -> Self {
        Keyword(node)
    }
}

impl ToPyObject for Keyword {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Keyword<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(Keyword(self).to_object(py))
    }
}

#[pymethods]
impl Keyword {
    #[getter]
    #[inline]
    fn get_arg(&self, py: Python) -> PyResult<PyObject> {
        self.0.arg.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_alias", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct Alias(pub &'static ast::Alias<SourceRange>);

impl From<&'static ast::Alias<SourceRange>> for Alias {
    fn from(node: &'static ast::Alias<SourceRange>) -> Self {
        Alias(node)
    }
}

impl ToPyObject for Alias {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Alias<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(Alias(self).to_object(py))
    }
}

#[pymethods]
impl Alias {
    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_asname(&self, py: Python) -> PyResult<PyObject> {
        self.0.asname.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_withitem", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct WithItem(pub &'static ast::WithItem<SourceRange>);

impl From<&'static ast::WithItem<SourceRange>> for WithItem {
    fn from(node: &'static ast::WithItem<SourceRange>) -> Self {
        WithItem(node)
    }
}

impl ToPyObject for WithItem {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::WithItem<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(WithItem(self).to_object(py))
    }
}

#[pymethods]
impl WithItem {
    #[getter]
    #[inline]
    fn get_context_expr(&self, py: Python) -> PyResult<PyObject> {
        self.0.context_expr.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_optional_vars(&self, py: Python) -> PyResult<PyObject> {
        self.0.optional_vars.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_match_case", extends=super::Ast, frozen)]
#[derive(Clone, Debug)]
pub struct MatchCase(pub &'static ast::MatchCase<SourceRange>);

impl From<&'static ast::MatchCase<SourceRange>> for MatchCase {
    fn from(node: &'static ast::MatchCase<SourceRange>) -> Self {
        MatchCase(node)
    }
}

impl ToPyObject for MatchCase {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast).add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::MatchCase<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(MatchCase(self).to_object(py))
    }
}

#[pymethods]
impl MatchCase {
    #[getter]
    #[inline]
    fn get_pattern(&self, py: Python) -> PyResult<PyObject> {
        self.0.pattern.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_guard(&self, py: Python) -> PyResult<PyObject> {
        self.0.guard.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_body(&self, py: Python) -> PyResult<PyObject> {
        self.0.body.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_pattern", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct Pattern;

impl From<&'static ast::Pattern<SourceRange>> for Pattern {
    fn from(_node: &'static ast::Pattern<SourceRange>) -> Self {
        Pattern
    }
}

#[pymethods]
impl Pattern {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for Pattern {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::Pattern<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::MatchValue(cons) => cons.to_py_wrapper(py),
            Self::MatchSingleton(cons) => cons.to_py_wrapper(py),
            Self::MatchSequence(cons) => cons.to_py_wrapper(py),
            Self::MatchMapping(cons) => cons.to_py_wrapper(py),
            Self::MatchClass(cons) => cons.to_py_wrapper(py),
            Self::MatchStar(cons) => cons.to_py_wrapper(py),
            Self::MatchAs(cons) => cons.to_py_wrapper(py),
            Self::MatchOr(cons) => cons.to_py_wrapper(py),
        }
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchValue", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchValue(pub &'static ast::PatternMatchValue<SourceRange>);

impl From<&'static ast::PatternMatchValue<SourceRange>> for PatternMatchValue {
    fn from(node: &'static ast::PatternMatchValue<SourceRange>) -> Self {
        PatternMatchValue(node)
    }
}

impl ToPyObject for PatternMatchValue {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchValue<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchValue(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchValue {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchSingleton", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchSingleton(pub &'static ast::PatternMatchSingleton<SourceRange>);

impl From<&'static ast::PatternMatchSingleton<SourceRange>> for PatternMatchSingleton {
    fn from(node: &'static ast::PatternMatchSingleton<SourceRange>) -> Self {
        PatternMatchSingleton(node)
    }
}

impl ToPyObject for PatternMatchSingleton {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchSingleton<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchSingleton(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchSingleton {
    #[getter]
    #[inline]
    fn get_value(&self, py: Python) -> PyResult<PyObject> {
        self.0.value.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchSequence", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchSequence(pub &'static ast::PatternMatchSequence<SourceRange>);

impl From<&'static ast::PatternMatchSequence<SourceRange>> for PatternMatchSequence {
    fn from(node: &'static ast::PatternMatchSequence<SourceRange>) -> Self {
        PatternMatchSequence(node)
    }
}

impl ToPyObject for PatternMatchSequence {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchSequence<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchSequence(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchSequence {
    #[getter]
    #[inline]
    fn get_patterns(&self, py: Python) -> PyResult<PyObject> {
        self.0.patterns.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchMapping", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchMapping(pub &'static ast::PatternMatchMapping<SourceRange>);

impl From<&'static ast::PatternMatchMapping<SourceRange>> for PatternMatchMapping {
    fn from(node: &'static ast::PatternMatchMapping<SourceRange>) -> Self {
        PatternMatchMapping(node)
    }
}

impl ToPyObject for PatternMatchMapping {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchMapping<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchMapping(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchMapping {
    #[getter]
    #[inline]
    fn get_keys(&self, py: Python) -> PyResult<PyObject> {
        self.0.keys.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_patterns(&self, py: Python) -> PyResult<PyObject> {
        self.0.patterns.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_rest(&self, py: Python) -> PyResult<PyObject> {
        self.0.rest.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchClass", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchClass(pub &'static ast::PatternMatchClass<SourceRange>);

impl From<&'static ast::PatternMatchClass<SourceRange>> for PatternMatchClass {
    fn from(node: &'static ast::PatternMatchClass<SourceRange>) -> Self {
        PatternMatchClass(node)
    }
}

impl ToPyObject for PatternMatchClass {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchClass<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchClass(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchClass {
    #[getter]
    #[inline]
    fn get_cls(&self, py: Python) -> PyResult<PyObject> {
        self.0.cls.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_patterns(&self, py: Python) -> PyResult<PyObject> {
        self.0.patterns.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_kwd_attrs(&self, py: Python) -> PyResult<PyObject> {
        self.0.kwd_attrs.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_kwd_patterns(&self, py: Python) -> PyResult<PyObject> {
        self.0.kwd_patterns.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchStar", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchStar(pub &'static ast::PatternMatchStar<SourceRange>);

impl From<&'static ast::PatternMatchStar<SourceRange>> for PatternMatchStar {
    fn from(node: &'static ast::PatternMatchStar<SourceRange>) -> Self {
        PatternMatchStar(node)
    }
}

impl ToPyObject for PatternMatchStar {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchStar<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchStar(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchStar {
    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchAs", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchAs(pub &'static ast::PatternMatchAs<SourceRange>);

impl From<&'static ast::PatternMatchAs<SourceRange>> for PatternMatchAs {
    fn from(node: &'static ast::PatternMatchAs<SourceRange>) -> Self {
        PatternMatchAs(node)
    }
}

impl ToPyObject for PatternMatchAs {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchAs<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchAs(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchAs {
    #[getter]
    #[inline]
    fn get_pattern(&self, py: Python) -> PyResult<PyObject> {
        self.0.pattern.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_name(&self, py: Python) -> PyResult<PyObject> {
        self.0.name.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_MatchOr", extends=Pattern, frozen)]
#[derive(Clone, Debug)]
pub struct PatternMatchOr(pub &'static ast::PatternMatchOr<SourceRange>);

impl From<&'static ast::PatternMatchOr<SourceRange>> for PatternMatchOr {
    fn from(node: &'static ast::PatternMatchOr<SourceRange>) -> Self {
        PatternMatchOr(node)
    }
}

impl ToPyObject for PatternMatchOr {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(Pattern)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::PatternMatchOr<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(PatternMatchOr(self).to_object(py))
    }
}

#[pymethods]
impl PatternMatchOr {
    #[getter]
    #[inline]
    fn get_patterns(&self, py: Python) -> PyResult<PyObject> {
        self.0.patterns.to_py_wrapper(py)
    }
}

#[pyclass(module="rustpython_ast.located", name="_type_ignore", extends=super::Ast, frozen, subclass)]
#[derive(Clone, Debug)]
pub struct TypeIgnore;

impl From<&'static ast::TypeIgnore<SourceRange>> for TypeIgnore {
    fn from(_node: &'static ast::TypeIgnore<SourceRange>) -> Self {
        TypeIgnore
    }
}

#[pymethods]
impl TypeIgnore {
    #[new]
    fn new() -> PyClassInitializer<Self> {
        PyClassInitializer::from(Ast).add_subclass(Self)
    }
}
impl ToPyObject for TypeIgnore {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = Self::new();
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::TypeIgnore<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::TypeIgnore(cons) => cons.to_py_wrapper(py),
        }
    }
}

#[pyclass(module="rustpython_ast.located", name="_TypeIgnore", extends=TypeIgnore, frozen)]
#[derive(Clone, Debug)]
pub struct TypeIgnoreTypeIgnore(pub &'static ast::TypeIgnoreTypeIgnore<SourceRange>);

impl From<&'static ast::TypeIgnoreTypeIgnore<SourceRange>> for TypeIgnoreTypeIgnore {
    fn from(node: &'static ast::TypeIgnoreTypeIgnore<SourceRange>) -> Self {
        TypeIgnoreTypeIgnore(node)
    }
}

impl ToPyObject for TypeIgnoreTypeIgnore {
    fn to_object(&self, py: Python) -> PyObject {
        let initializer = PyClassInitializer::from(Ast)
            .add_subclass(TypeIgnore)
            .add_subclass(self.clone());
        Py::new(py, initializer).unwrap().into_py(py)
    }
}

impl ToPyWrapper for ast::TypeIgnoreTypeIgnore<SourceRange> {
    #[inline]
    fn to_py_wrapper(&'static self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(TypeIgnoreTypeIgnore(self).to_object(py))
    }
}

#[pymethods]
impl TypeIgnoreTypeIgnore {
    #[getter]
    #[inline]
    fn get_lineno(&self, py: Python) -> PyResult<PyObject> {
        self.0.lineno.to_py_wrapper(py)
    }

    #[getter]
    #[inline]
    fn get_tag(&self, py: Python) -> PyResult<PyObject> {
        self.0.tag.to_py_wrapper(py)
    }
}

impl ToPyWrapper for ast::ExprContext {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::Load => Ok(ExprContextLoad.to_object(py)),
            Self::Store => Ok(ExprContextStore.to_object(py)),
            Self::Del => Ok(ExprContextDel.to_object(py)),
        }
    }
}

impl ToPyWrapper for ast::ExprContextLoad {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprContextLoad.to_object(py))
    }
}

impl ToPyWrapper for ast::ExprContextStore {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprContextStore.to_object(py))
    }
}

impl ToPyWrapper for ast::ExprContextDel {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(ExprContextDel.to_object(py))
    }
}

impl ToPyWrapper for ast::BoolOp {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::And => Ok(BoolOpAnd.to_object(py)),
            Self::Or => Ok(BoolOpOr.to_object(py)),
        }
    }
}

impl ToPyWrapper for ast::BoolOpAnd {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(BoolOpAnd.to_object(py))
    }
}

impl ToPyWrapper for ast::BoolOpOr {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(BoolOpOr.to_object(py))
    }
}

impl ToPyWrapper for ast::Operator {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::Add => Ok(OperatorAdd.to_object(py)),
            Self::Sub => Ok(OperatorSub.to_object(py)),
            Self::Mult => Ok(OperatorMult.to_object(py)),
            Self::MatMult => Ok(OperatorMatMult.to_object(py)),
            Self::Div => Ok(OperatorDiv.to_object(py)),
            Self::Mod => Ok(OperatorMod.to_object(py)),
            Self::Pow => Ok(OperatorPow.to_object(py)),
            Self::LShift => Ok(OperatorLShift.to_object(py)),
            Self::RShift => Ok(OperatorRShift.to_object(py)),
            Self::BitOr => Ok(OperatorBitOr.to_object(py)),
            Self::BitXor => Ok(OperatorBitXor.to_object(py)),
            Self::BitAnd => Ok(OperatorBitAnd.to_object(py)),
            Self::FloorDiv => Ok(OperatorFloorDiv.to_object(py)),
        }
    }
}

impl ToPyWrapper for ast::OperatorAdd {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorAdd.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorSub {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorSub.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorMult {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorMult.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorMatMult {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorMatMult.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorDiv {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorDiv.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorMod {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorMod.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorPow {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorPow.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorLShift {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorLShift.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorRShift {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorRShift.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorBitOr {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorBitOr.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorBitXor {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorBitXor.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorBitAnd {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorBitAnd.to_object(py))
    }
}

impl ToPyWrapper for ast::OperatorFloorDiv {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(OperatorFloorDiv.to_object(py))
    }
}

impl ToPyWrapper for ast::UnaryOp {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::Invert => Ok(UnaryOpInvert.to_object(py)),
            Self::Not => Ok(UnaryOpNot.to_object(py)),
            Self::UAdd => Ok(UnaryOpUAdd.to_object(py)),
            Self::USub => Ok(UnaryOpUSub.to_object(py)),
        }
    }
}

impl ToPyWrapper for ast::UnaryOpInvert {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(UnaryOpInvert.to_object(py))
    }
}

impl ToPyWrapper for ast::UnaryOpNot {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(UnaryOpNot.to_object(py))
    }
}

impl ToPyWrapper for ast::UnaryOpUAdd {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(UnaryOpUAdd.to_object(py))
    }
}

impl ToPyWrapper for ast::UnaryOpUSub {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(UnaryOpUSub.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOp {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        match &self {
            Self::Eq => Ok(CmpOpEq.to_object(py)),
            Self::NotEq => Ok(CmpOpNotEq.to_object(py)),
            Self::Lt => Ok(CmpOpLt.to_object(py)),
            Self::LtE => Ok(CmpOpLtE.to_object(py)),
            Self::Gt => Ok(CmpOpGt.to_object(py)),
            Self::GtE => Ok(CmpOpGtE.to_object(py)),
            Self::Is => Ok(CmpOpIs.to_object(py)),
            Self::IsNot => Ok(CmpOpIsNot.to_object(py)),
            Self::In => Ok(CmpOpIn.to_object(py)),
            Self::NotIn => Ok(CmpOpNotIn.to_object(py)),
        }
    }
}

impl ToPyWrapper for ast::CmpOpEq {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpEq.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpNotEq {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpNotEq.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpLt {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpLt.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpLtE {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpLtE.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpGt {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpGt.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpGtE {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpGtE.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpIs {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpIs.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpIsNot {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpIsNot.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpIn {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpIn.to_object(py))
    }
}

impl ToPyWrapper for ast::CmpOpNotIn {
    #[inline]
    fn to_py_wrapper(&self, py: Python) -> PyResult<Py<PyAny>> {
        Ok(CmpOpNotIn.to_object(py))
    }
}

pub fn add_to_module(py: Python, m: &PyModule) -> PyResult<()> {
    super::init_module(py, m)?;
    super::init_type::<Mod, ast::Mod>(py, m)?;
    super::init_type::<ModModule, ast::ModModule>(py, m)?;
    super::init_type::<ModInteractive, ast::ModInteractive>(py, m)?;
    super::init_type::<ModExpression, ast::ModExpression>(py, m)?;
    super::init_type::<ModFunctionType, ast::ModFunctionType>(py, m)?;
    super::init_type::<Stmt, ast::Stmt>(py, m)?;
    super::init_type::<StmtFunctionDef, ast::StmtFunctionDef>(py, m)?;
    super::init_type::<StmtAsyncFunctionDef, ast::StmtAsyncFunctionDef>(py, m)?;
    super::init_type::<StmtClassDef, ast::StmtClassDef>(py, m)?;
    super::init_type::<StmtReturn, ast::StmtReturn>(py, m)?;
    super::init_type::<StmtDelete, ast::StmtDelete>(py, m)?;
    super::init_type::<StmtAssign, ast::StmtAssign>(py, m)?;
    super::init_type::<StmtAugAssign, ast::StmtAugAssign>(py, m)?;
    super::init_type::<StmtAnnAssign, ast::StmtAnnAssign>(py, m)?;
    super::init_type::<StmtFor, ast::StmtFor>(py, m)?;
    super::init_type::<StmtAsyncFor, ast::StmtAsyncFor>(py, m)?;
    super::init_type::<StmtWhile, ast::StmtWhile>(py, m)?;
    super::init_type::<StmtIf, ast::StmtIf>(py, m)?;
    super::init_type::<StmtWith, ast::StmtWith>(py, m)?;
    super::init_type::<StmtAsyncWith, ast::StmtAsyncWith>(py, m)?;
    super::init_type::<StmtMatch, ast::StmtMatch>(py, m)?;
    super::init_type::<StmtRaise, ast::StmtRaise>(py, m)?;
    super::init_type::<StmtTry, ast::StmtTry>(py, m)?;
    super::init_type::<StmtTryStar, ast::StmtTryStar>(py, m)?;
    super::init_type::<StmtAssert, ast::StmtAssert>(py, m)?;
    super::init_type::<StmtImport, ast::StmtImport>(py, m)?;
    super::init_type::<StmtImportFrom, ast::StmtImportFrom>(py, m)?;
    super::init_type::<StmtGlobal, ast::StmtGlobal>(py, m)?;
    super::init_type::<StmtNonlocal, ast::StmtNonlocal>(py, m)?;
    super::init_type::<StmtExpr, ast::StmtExpr>(py, m)?;
    super::init_type::<StmtPass, ast::StmtPass>(py, m)?;
    super::init_type::<StmtBreak, ast::StmtBreak>(py, m)?;
    super::init_type::<StmtContinue, ast::StmtContinue>(py, m)?;
    super::init_type::<Expr, ast::Expr>(py, m)?;
    super::init_type::<ExprBoolOp, ast::ExprBoolOp>(py, m)?;
    super::init_type::<ExprNamedExpr, ast::ExprNamedExpr>(py, m)?;
    super::init_type::<ExprBinOp, ast::ExprBinOp>(py, m)?;
    super::init_type::<ExprUnaryOp, ast::ExprUnaryOp>(py, m)?;
    super::init_type::<ExprLambda, ast::ExprLambda>(py, m)?;
    super::init_type::<ExprIfExp, ast::ExprIfExp>(py, m)?;
    super::init_type::<ExprDict, ast::ExprDict>(py, m)?;
    super::init_type::<ExprSet, ast::ExprSet>(py, m)?;
    super::init_type::<ExprListComp, ast::ExprListComp>(py, m)?;
    super::init_type::<ExprSetComp, ast::ExprSetComp>(py, m)?;
    super::init_type::<ExprDictComp, ast::ExprDictComp>(py, m)?;
    super::init_type::<ExprGeneratorExp, ast::ExprGeneratorExp>(py, m)?;
    super::init_type::<ExprAwait, ast::ExprAwait>(py, m)?;
    super::init_type::<ExprYield, ast::ExprYield>(py, m)?;
    super::init_type::<ExprYieldFrom, ast::ExprYieldFrom>(py, m)?;
    super::init_type::<ExprCompare, ast::ExprCompare>(py, m)?;
    super::init_type::<ExprCall, ast::ExprCall>(py, m)?;
    super::init_type::<ExprFormattedValue, ast::ExprFormattedValue>(py, m)?;
    super::init_type::<ExprJoinedStr, ast::ExprJoinedStr>(py, m)?;
    super::init_type::<ExprConstant, ast::ExprConstant>(py, m)?;
    super::init_type::<ExprAttribute, ast::ExprAttribute>(py, m)?;
    super::init_type::<ExprSubscript, ast::ExprSubscript>(py, m)?;
    super::init_type::<ExprStarred, ast::ExprStarred>(py, m)?;
    super::init_type::<ExprName, ast::ExprName>(py, m)?;
    super::init_type::<ExprList, ast::ExprList>(py, m)?;
    super::init_type::<ExprTuple, ast::ExprTuple>(py, m)?;
    super::init_type::<ExprSlice, ast::ExprSlice>(py, m)?;
    super::init_type::<ExprContext, ast::ExprContext>(py, m)?;
    super::init_type::<ExprContextLoad, ast::ExprContextLoad>(py, m)?;
    super::init_type::<ExprContextStore, ast::ExprContextStore>(py, m)?;
    super::init_type::<ExprContextDel, ast::ExprContextDel>(py, m)?;
    super::init_type::<BoolOp, ast::BoolOp>(py, m)?;
    super::init_type::<BoolOpAnd, ast::BoolOpAnd>(py, m)?;
    super::init_type::<BoolOpOr, ast::BoolOpOr>(py, m)?;
    super::init_type::<Operator, ast::Operator>(py, m)?;
    super::init_type::<OperatorAdd, ast::OperatorAdd>(py, m)?;
    super::init_type::<OperatorSub, ast::OperatorSub>(py, m)?;
    super::init_type::<OperatorMult, ast::OperatorMult>(py, m)?;
    super::init_type::<OperatorMatMult, ast::OperatorMatMult>(py, m)?;
    super::init_type::<OperatorDiv, ast::OperatorDiv>(py, m)?;
    super::init_type::<OperatorMod, ast::OperatorMod>(py, m)?;
    super::init_type::<OperatorPow, ast::OperatorPow>(py, m)?;
    super::init_type::<OperatorLShift, ast::OperatorLShift>(py, m)?;
    super::init_type::<OperatorRShift, ast::OperatorRShift>(py, m)?;
    super::init_type::<OperatorBitOr, ast::OperatorBitOr>(py, m)?;
    super::init_type::<OperatorBitXor, ast::OperatorBitXor>(py, m)?;
    super::init_type::<OperatorBitAnd, ast::OperatorBitAnd>(py, m)?;
    super::init_type::<OperatorFloorDiv, ast::OperatorFloorDiv>(py, m)?;
    super::init_type::<UnaryOp, ast::UnaryOp>(py, m)?;
    super::init_type::<UnaryOpInvert, ast::UnaryOpInvert>(py, m)?;
    super::init_type::<UnaryOpNot, ast::UnaryOpNot>(py, m)?;
    super::init_type::<UnaryOpUAdd, ast::UnaryOpUAdd>(py, m)?;
    super::init_type::<UnaryOpUSub, ast::UnaryOpUSub>(py, m)?;
    super::init_type::<CmpOp, ast::CmpOp>(py, m)?;
    super::init_type::<CmpOpEq, ast::CmpOpEq>(py, m)?;
    super::init_type::<CmpOpNotEq, ast::CmpOpNotEq>(py, m)?;
    super::init_type::<CmpOpLt, ast::CmpOpLt>(py, m)?;
    super::init_type::<CmpOpLtE, ast::CmpOpLtE>(py, m)?;
    super::init_type::<CmpOpGt, ast::CmpOpGt>(py, m)?;
    super::init_type::<CmpOpGtE, ast::CmpOpGtE>(py, m)?;
    super::init_type::<CmpOpIs, ast::CmpOpIs>(py, m)?;
    super::init_type::<CmpOpIsNot, ast::CmpOpIsNot>(py, m)?;
    super::init_type::<CmpOpIn, ast::CmpOpIn>(py, m)?;
    super::init_type::<CmpOpNotIn, ast::CmpOpNotIn>(py, m)?;
    super::init_type::<Comprehension, ast::Comprehension>(py, m)?;
    super::init_type::<ExceptHandler, ast::ExceptHandler>(py, m)?;
    super::init_type::<ExceptHandlerExceptHandler, ast::ExceptHandlerExceptHandler>(py, m)?;
    super::init_type::<Arguments, ast::PythonArguments>(py, m)?;
    super::init_type::<Arg, ast::Arg>(py, m)?;
    super::init_type::<Keyword, ast::Keyword>(py, m)?;
    super::init_type::<Alias, ast::Alias>(py, m)?;
    super::init_type::<WithItem, ast::WithItem>(py, m)?;
    super::init_type::<MatchCase, ast::MatchCase>(py, m)?;
    super::init_type::<Pattern, ast::Pattern>(py, m)?;
    super::init_type::<PatternMatchValue, ast::PatternMatchValue>(py, m)?;
    super::init_type::<PatternMatchSingleton, ast::PatternMatchSingleton>(py, m)?;
    super::init_type::<PatternMatchSequence, ast::PatternMatchSequence>(py, m)?;
    super::init_type::<PatternMatchMapping, ast::PatternMatchMapping>(py, m)?;
    super::init_type::<PatternMatchClass, ast::PatternMatchClass>(py, m)?;
    super::init_type::<PatternMatchStar, ast::PatternMatchStar>(py, m)?;
    super::init_type::<PatternMatchAs, ast::PatternMatchAs>(py, m)?;
    super::init_type::<PatternMatchOr, ast::PatternMatchOr>(py, m)?;
    super::init_type::<TypeIgnore, ast::TypeIgnore>(py, m)?;
    super::init_type::<TypeIgnoreTypeIgnore, ast::TypeIgnoreTypeIgnore>(py, m)?;
    Ok(())
}
